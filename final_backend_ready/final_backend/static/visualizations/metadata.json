[
  {
    "id": "301275e38250471bba4a14f3a10be405",
    "title": "Bar • Sales vs Category",
    "kind": "bar",
    "x": "Category",
    "y": "Sales",
    "image_url": "/api/visualizations/301275e38250471bba4a14f3a10be405/image",
    "thumb_url": "/api/visualizations/301275e38250471bba4a14f3a10be405/thumb",
    "table_csv_url": "/api/visualizations/301275e38250471bba4a14f3a10be405/table",
    "created_at": "2025-09-04T12:26:49.745096Z",
    "source_file": "SuperStore Sales DataSet.xlsx",
    "source_files": [
      "SuperStore Sales DataSet.xlsx"
    ],
    "combined": false,
    "chat_id": "1756883857787",
    "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n(Feel free to use other obvious matches when present.)\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"give me line plot for payment mode and sales\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart."
  },
  {
    "id": "d1188dbbb63a43e9a077560f1f1a9881",
    "title": "Pie • Category",
    "kind": "pie",
    "x": "Category",
    "y": "Sales",
    "image_url": "/api/visualizations/d1188dbbb63a43e9a077560f1f1a9881/image",
    "thumb_url": "/api/visualizations/d1188dbbb63a43e9a077560f1f1a9881/thumb",
    "table_csv_url": "/api/visualizations/d1188dbbb63a43e9a077560f1f1a9881/table",
    "created_at": "2025-09-04T12:25:54.308722Z",
    "source_file": "SuperStore Sales DataSet.xlsx",
    "source_files": [
      "SuperStore Sales DataSet.xlsx"
    ],
    "combined": false,
    "chat_id": "1756883857787",
    "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n(Feel free to use other obvious matches when present.)\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"give me pie plot  for sub-category and profit\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart."
  },
  {
    "id": "d4dedfc2c7214ac3aaa1305f6f196a77",
    "title": "Pie • Category",
    "kind": "pie",
    "x": "Category",
    "y": "Sales",
    "image_url": "/api/visualizations/d4dedfc2c7214ac3aaa1305f6f196a77/image",
    "thumb_url": "/api/visualizations/d4dedfc2c7214ac3aaa1305f6f196a77/thumb",
    "table_csv_url": "/api/visualizations/d4dedfc2c7214ac3aaa1305f6f196a77/table",
    "created_at": "2025-09-04T12:25:06.930249Z",
    "source_file": "SuperStore Sales DataSet.xlsx",
    "source_files": [
      "SuperStore Sales DataSet.xlsx"
    ],
    "combined": false,
    "chat_id": "1756883857787",
    "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n(Feel free to use other obvious matches when present.)\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"give me pie plot for profit and region\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart."
  },
  {
    "id": "261a4e482695415c9ea290eee129f358",
    "title": "Pie • Category",
    "kind": "pie",
    "x": "Category",
    "y": "Sales",
    "image_url": "/api/visualizations/261a4e482695415c9ea290eee129f358/image",
    "thumb_url": "/api/visualizations/261a4e482695415c9ea290eee129f358/thumb",
    "table_csv_url": "/api/visualizations/261a4e482695415c9ea290eee129f358/table",
    "created_at": "2025-09-04T12:24:36.130501Z",
    "source_file": "SuperStore Sales DataSet.xlsx",
    "source_files": [
      "SuperStore Sales DataSet.xlsx"
    ],
    "combined": false,
    "chat_id": "1756883857787",
    "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n(Feel free to use other obvious matches when present.)\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"give me pie plot for sales and profit\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart."
  },
  {
    "id": "0649015612dc450d81bdd1e5d0fb0f40",
    "title": "Bar • Sales vs Region",
    "kind": "bar",
    "x": "Region",
    "y": "Sales",
    "image_url": "/api/visualizations/0649015612dc450d81bdd1e5d0fb0f40/image",
    "thumb_url": "/api/visualizations/0649015612dc450d81bdd1e5d0fb0f40/thumb",
    "table_csv_url": "/api/visualizations/0649015612dc450d81bdd1e5d0fb0f40/table",
    "created_at": "2025-09-04T12:23:52.185548Z",
    "source_file": "SuperStore Sales DataSet.xlsx",
    "source_files": [
      "SuperStore Sales DataSet.xlsx"
    ],
    "combined": false,
    "chat_id": "1756883857787",
    "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n(Feel free to use other obvious matches when present.)\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"give me bar plot of Sales by Region\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart."
  },
  {
    "id": "3326b868cd3d437d99faacace82e3abc",
    "title": "Bar • Sales,Profit vs Region",
    "kind": "bar",
    "x": "Region",
    "y": "Sales,Profit",
    "image_url": "/api/visualizations/3326b868cd3d437d99faacace82e3abc/image",
    "thumb_url": "/api/visualizations/3326b868cd3d437d99faacace82e3abc/thumb",
    "created_at": "2025-09-03T04:16:36.804791Z",
    "source_file": "SuperStore Sales DataSet.xlsx",
    "source_files": [
      "SuperStore Sales DataSet.xlsx"
    ],
    "combined": false,
    "chat_id": "1756871798859",
    "question": "DATA IS READ-ONLY.\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\n- Reuse existing columns; if needed, use locals.\n- Do not write to disk.\n\n\nTry to map case-insensitively:\n- sales: sales, sale_amount, revenue, net_sales, sales_amount\n- profit: profit, net_profit, margin, gross_profit, profit_amount\n- salary: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\n- experience: experience, years_experience, yoe, yrs_exp, exp\n\nCreate the chart: \"give me bar plot for sales by region\"."
  },
  {
    "id": "538d4cb126a14423a4763ce2dac4f3d1",
    "title": "Pie • Year",
    "kind": "pie",
    "x": "Year",
    "y": "Sales",
    "image_url": "/api/visualizations/538d4cb126a14423a4763ce2dac4f3d1/image",
    "thumb_url": "/api/visualizations/538d4cb126a14423a4763ce2dac4f3d1/thumb",
    "created_at": "2025-09-02T11:32:05.827217Z",
    "source_file": "single_product_region_category.xlsx",
    "source_files": [
      "single_product_region_category.xlsx"
    ],
    "combined": false,
    "chat_id": "1755847384537",
    "question": "DATA IS READ-ONLY.\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\n- Reuse existing columns; if needed, use locals.\n- Do not write to disk.\n\n\nTry to map case-insensitively:\n- sales: sales, sale_amount, revenue, net_sales, sales_amount\n- profit: profit, net_profit, margin, gross_profit, profit_amount\n- salary: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\n- experience: experience, years_experience, yoe, yrs_exp, exp\n\nCreate the chart: \"give pie plot for sales and profit\"."
  },
  {
    "id": "bf48a70dddd3413299e26309017e6e3e",
    "title": "Pie • Discount",
    "kind": "pie",
    "x": "Discount",
    "y": "Sales",
    "image_url": "/api/visualizations/bf48a70dddd3413299e26309017e6e3e/image",
    "thumb_url": "/api/visualizations/bf48a70dddd3413299e26309017e6e3e/thumb",
    "created_at": "2025-09-02T11:30:41.901080Z",
    "source_file": "single_product_region_category.xlsx",
    "source_files": [
      "single_product_region_category.xlsx"
    ],
    "combined": false,
    "chat_id": "1755847384537",
    "question": "DATA IS READ-ONLY.\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\n- Reuse existing columns; if needed, use locals.\n- Do not write to disk.\n\n\nTry to map case-insensitively:\n- sales: sales, sale_amount, revenue, net_sales, sales_amount\n- profit: profit, net_profit, margin, gross_profit, profit_amount\n- salary: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\n- experience: experience, years_experience, yoe, yrs_exp, exp\n\nCreate the chart: \"give pie plot for sales and profit\"."
  },
  {
    "id": "c06882be0fa54e498e42c62a67798164",
    "title": "Line • ['Sales', 'Profit', 'Revenue'] vs Discount",
    "kind": "line",
    "x": "Discount",
    "y": [
      "Sales",
      "Profit",
      "Revenue"
    ],
    "image_url": "/api/visualizations/c06882be0fa54e498e42c62a67798164/image",
    "thumb_url": "/api/visualizations/c06882be0fa54e498e42c62a67798164/thumb",
    "created_at": "2025-09-02T11:30:02.531835Z",
    "source_file": "single_product_region_category.xlsx",
    "source_files": [
      "single_product_region_category.xlsx"
    ],
    "combined": false,
    "chat_id": "1755847384537",
    "question": "DATA IS READ-ONLY.\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\n- Reuse existing columns; if needed, use locals.\n- Do not write to disk.\n\n\nTry to map case-insensitively:\n- sales: sales, sale_amount, revenue, net_sales, sales_amount\n- profit: profit, net_profit, margin, gross_profit, profit_amount\n- salary: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\n- experience: experience, years_experience, yoe, yrs_exp, exp\n\nCreate the chart: \"give me line plot for sales and revenue\"."
  },
  {
    "id": "aaf97f6390bf4971a0ec3bef944eac9a",
    "title": "Line • Sales vs Year",
    "kind": "line",
    "x": "Year",
    "y": "Sales",
    "image_url": "/api/visualizations/aaf97f6390bf4971a0ec3bef944eac9a/image",
    "thumb_url": "/api/visualizations/aaf97f6390bf4971a0ec3bef944eac9a/thumb",
    "created_at": "2025-09-02T11:15:22.255151Z",
    "source_file": "single_product_region_category.xlsx",
    "source_files": [
      "single_product_region_category.xlsx"
    ],
    "combined": false,
    "chat_id": "1755847384537",
    "question": "DATA IS READ-ONLY.\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\n- Reuse existing columns; if needed, use locals.\n- Do not write to disk.\n\n\nTry to map case-insensitively:\n- sales: sales, sale_amount, revenue, net_sales, sales_amount\n- profit: profit, net_profit, margin, gross_profit, profit_amount\n- salary: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\n- experience: experience, years_experience, yoe, yrs_exp, exp\n\nCreate the chart: \"give me line plot for sales and revenue\"."
  },
  {
    "id": "70cc68163ae84740af67ab542e1175f2",
    "title": "Pie • Year",
    "kind": "pie",
    "x": "Year",
    "y": "Sales",
    "image_url": "/api/visualizations/70cc68163ae84740af67ab542e1175f2/image",
    "thumb_url": "/api/visualizations/70cc68163ae84740af67ab542e1175f2/thumb",
    "created_at": "2025-09-02T11:14:19.641638Z",
    "source_file": "single_product_region_category.xlsx",
    "source_files": [
      "single_product_region_category.xlsx"
    ],
    "combined": false,
    "chat_id": "1755847384537",
    "question": "DATA IS READ-ONLY.\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\n- Reuse existing columns; if needed, use locals.\n- Do not write to disk.\n\n\nTry to map case-insensitively:\n- sales: sales, sale_amount, revenue, net_sales, sales_amount\n- profit: profit, net_profit, margin, gross_profit, profit_amount\n- salary: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\n- experience: experience, years_experience, yoe, yrs_exp, exp\n\nCreate the chart: \"give pie plot for sales and profit\"."
  },
  {
    "id": "25abebb06f1f4d069bfaaa9249b8ad5f",
    "title": "Pie • Product",
    "kind": "pie",
    "x": "Product",
    "y": "Sales",
    "image_url": "/api/visualizations/25abebb06f1f4d069bfaaa9249b8ad5f/image",
    "thumb_url": "/api/visualizations/25abebb06f1f4d069bfaaa9249b8ad5f/thumb",
    "created_at": "2025-09-02T11:12:52.315109Z",
    "source_file": "SuperStore Sales DataSet.xlsx",
    "source_files": [
      "SuperStore Sales DataSet.xlsx"
    ],
    "combined": false,
    "chat_id": "1755847384537",
    "question": "DATA IS READ-ONLY.\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\n- Reuse existing columns; if needed, use locals.\n- Do not write to disk.\n\n\nTry to map case-insensitively:\n- sales: sales, sale_amount, revenue, net_sales, sales_amount\n- profit: profit, net_profit, margin, gross_profit, profit_amount\n- salary: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\n- experience: experience, years_experience, yoe, yrs_exp, exp\n\nCreate the chart: \"give me pie plot for product and sales\"."
  },
  {
    "id": "601fc35b1a0d415883dfff3a65e5e786",
    "title": "Pie • Region",
    "kind": "pie",
    "x": "Region",
    "y": "Sales",
    "image_url": "/api/visualizations/601fc35b1a0d415883dfff3a65e5e786/image",
    "thumb_url": "/api/visualizations/601fc35b1a0d415883dfff3a65e5e786/thumb",
    "created_at": "2025-09-02T10:15:11.643809Z",
    "source_file": "SuperStore Sales DataSet.xlsx",
    "source_files": [
      "SuperStore Sales DataSet.xlsx"
    ],
    "combined": false,
    "chat_id": "1755847384537",
    "question": "DATA IS READ-ONLY.\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\n- Reuse existing columns; if needed, use locals.\n- Do not write to disk.\n\n\nTry to map case-insensitively:\n- sales: sales, sale_amount, revenue, net_sales, sales_amount\n- profit: profit, net_profit, margin, gross_profit, profit_amount\n- salary: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\n- experience: experience, years_experience, yoe, yrs_exp, exp\n\nCreate the chart: \"give me pie plot for sale by region\"."
  },
  {
    "id": "af6cd087879646fca15c742068c64f68",
    "title": "Pie • Region",
    "kind": "pie",
    "x": "Region",
    "y": "Sales",
    "image_url": "/api/visualizations/af6cd087879646fca15c742068c64f68/image",
    "thumb_url": "/api/visualizations/af6cd087879646fca15c742068c64f68/thumb",
    "created_at": "2025-09-02T10:14:49.096874Z",
    "source_file": "SuperStore Sales DataSet.xlsx",
    "source_files": [
      "SuperStore Sales DataSet.xlsx"
    ],
    "combined": false,
    "chat_id": "1755684043422",
    "question": "DATA IS READ-ONLY.\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\n- Reuse existing columns; if needed, use locals.\n- Do not write to disk.\n\n\nTry to map case-insensitively:\n- sales: sales, sale_amount, revenue, net_sales, sales_amount\n- profit: profit, net_profit, margin, gross_profit, profit_amount\n- salary: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\n- experience: experience, years_experience, yoe, yrs_exp, exp\n\nCreate the chart: \"give me pie plot for sale by region\"."
  },
  {
    "id": "034ee77e040247138878cf10ff773343",
    "title": "Hist • Sales",
    "kind": "hist",
    "x": "Sales",
    "y": "frequency",
    "image_url": "/api/visualizations/034ee77e040247138878cf10ff773343/image",
    "thumb_url": "/api/visualizations/034ee77e040247138878cf10ff773343/thumb",
    "created_at": "2025-09-02T10:10:19.453844Z",
    "source_file": "SuperStore Sales DataSet.xlsx",
    "source_files": [
      "SuperStore Sales DataSet.xlsx"
    ],
    "combined": false,
    "chat_id": "1755847384537",
    "question": "DATA IS READ-ONLY.\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\n- Reuse existing columns; if needed, use locals.\n- Do not write to disk.\n\n\nTry to map case-insensitively:\n- sales: sales, sale_amount, revenue, net_sales, sales_amount\n- profit: profit, net_profit, margin, gross_profit, profit_amount\n- salary: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\n- experience: experience, years_experience, yoe, yrs_exp, exp\n\nCreate the chart: \"give me hist plot of sales and profit\"."
  },
  {
    "id": "d8d5edf5cd3c4727b7647354d380b52b",
    "title": "Line • Sales vs Profit",
    "kind": "line",
    "x": "Profit",
    "y": "Sales",
    "image_url": "/api/visualizations/d8d5edf5cd3c4727b7647354d380b52b/image",
    "thumb_url": "/api/visualizations/d8d5edf5cd3c4727b7647354d380b52b/thumb",
    "created_at": "2025-09-02T10:09:55.488170Z",
    "source_file": "SuperStore Sales DataSet.xlsx",
    "source_files": [
      "SuperStore Sales DataSet.xlsx"
    ],
    "combined": false,
    "chat_id": "1755847384537",
    "question": "DATA IS READ-ONLY.\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\n- Reuse existing columns; if needed, use locals.\n- Do not write to disk.\n\n\nTry to map case-insensitively:\n- sales: sales, sale_amount, revenue, net_sales, sales_amount\n- profit: profit, net_profit, margin, gross_profit, profit_amount\n- salary: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\n- experience: experience, years_experience, yoe, yrs_exp, exp\n\nCreate the chart: \"give me line plot for sales and profit\"."
  },
  {
    "id": "b1ad27c6022946e98d8fa251974df13f",
    "title": "Box • Value",
    "kind": "box",
    "x": null,
    "y": "Sales",
    "image_url": "/api/visualizations/b1ad27c6022946e98d8fa251974df13f/image",
    "thumb_url": "/api/visualizations/b1ad27c6022946e98d8fa251974df13f/thumb",
    "created_at": "2025-09-02T10:07:40.192764Z",
    "source_file": "SuperStore Sales DataSet.xlsx",
    "source_files": [
      "SuperStore Sales DataSet.xlsx"
    ],
    "combined": false,
    "chat_id": "1755847384537",
    "question": "DATA IS READ-ONLY.\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\n- Reuse existing columns; if needed, use locals.\n- Do not write to disk.\n\n\nTry to map case-insensitively:\n- sales: sales, sale_amount, revenue, net_sales, sales_amount\n- profit: profit, net_profit, margin, gross_profit, profit_amount\n- salary: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\n- experience: experience, years_experience, yoe, yrs_exp, exp\n\nCreate the chart: \"give me box plot for sales and profit\"."
  },
  {
    "id": "418a9951ac27431bb807f6679a871ec9",
    "title": "Line • Sales vs Profit",
    "kind": "line",
    "x": "Profit",
    "y": "Sales",
    "image_url": "/api/visualizations/418a9951ac27431bb807f6679a871ec9/image",
    "thumb_url": "/api/visualizations/418a9951ac27431bb807f6679a871ec9/thumb",
    "created_at": "2025-09-02T10:07:03.554049Z",
    "source_file": "SuperStore Sales DataSet.xlsx",
    "source_files": [
      "SuperStore Sales DataSet.xlsx"
    ],
    "combined": false,
    "chat_id": "1755847384537",
    "question": "DATA IS READ-ONLY.\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\n- Reuse existing columns; if needed, use locals.\n- Do not write to disk.\n\n\nTry to map case-insensitively:\n- sales: sales, sale_amount, revenue, net_sales, sales_amount\n- profit: profit, net_profit, margin, gross_profit, profit_amount\n- salary: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\n- experience: experience, years_experience, yoe, yrs_exp, exp\n\nCreate the chart: \"give me line plot for sales and profit\"."
  },
  {
    "id": "919afc2920f843d0a467e7f6efe79361",
    "title": "Pie • Year",
    "kind": "pie",
    "x": "Year",
    "y": "Sales",
    "image_url": "/api/visualizations/919afc2920f843d0a467e7f6efe79361/image",
    "thumb_url": "/api/visualizations/919afc2920f843d0a467e7f6efe79361/thumb",
    "created_at": "2025-09-01T12:49:27.223161Z",
    "source_file": "single_product_region_category.xlsx",
    "source_files": [
      "single_product_region_category.xlsx"
    ],
    "combined": false,
    "chat_id": "1755847384537",
    "question": "DATA IS READ-ONLY.\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\n- Reuse existing columns. If you must transform, make a local Series or use df.assign(**with a unique, temporary name**), but prefer locals.\n- Do not write to disk. Just build the plot and return it.\n\n\nTry to map case-insensitively:\n- sales: sales, sale_amount, revenue, net_sales, sales_amount\n- profit: profit, net_profit, margin, gross_profit, profit_amount\n- salary: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\n- experience: experience, years_experience, years_of_experience, yoe, yrs_exp, exp, experience_years\nClean numbers (strip currency/commas; convert \"10 yrs\" -> 10) before plotting.\n\nCreate exactly the chart user asked (e.g., \"yhyj\"). If ambiguous, choose the best matching columns and proceed."
  },
  {
    "id": "759b3a97f18844078c4226131cd55a3d",
    "title": "Bar • Sales,Price vs Year",
    "kind": "bar",
    "x": "Year",
    "y": "Sales,Price",
    "image_url": "/api/visualizations/759b3a97f18844078c4226131cd55a3d/image",
    "thumb_url": "/api/visualizations/759b3a97f18844078c4226131cd55a3d/thumb",
    "created_at": "2025-09-01T07:07:11.874171Z",
    "source_file": "Updated_SuperStore_Sales_with_Price.xlsx",
    "source_files": [
      "Updated_SuperStore_Sales_with_Price.xlsx"
    ],
    "combined": false,
    "chat_id": "1755684043422",
    "question": "DATA IS READ-ONLY.\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\n- Reuse existing columns. If you must transform, make a local Series or use df.assign(**with a unique, temporary name**), but prefer locals.\n- Do not write to disk. Just build the plot and return it.\n\n\nTry to map case-insensitively:\n- sales: sales, sale_amount, revenue, net_sales, sales_amount\n- profit: profit, net_profit, margin, gross_profit, profit_amount\n- salary: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\n- experience: experience, years_experience, years_of_experience, yoe, yrs_exp, exp, experience_years\nClean numbers (strip currency/commas; convert \"10 yrs\" -> 10) before plotting.\n\nCreate exactly the chart user asked (e.g., \"give me bar plot of year 2018 for price and revenue\"). If ambiguous, choose the best matching columns and proceed."
  },
  {
    "id": "7cdff50174ab45ce84226b58d8ba825f",
    "title": "Bar • Sales,Profit vs State",
    "kind": "bar",
    "x": "State",
    "y": "Sales,Profit",
    "image_url": "/api/visualizations/7cdff50174ab45ce84226b58d8ba825f/image",
    "thumb_url": "/api/visualizations/7cdff50174ab45ce84226b58d8ba825f/thumb",
    "created_at": "2025-09-01T07:04:40.706312Z",
    "source_file": "SuperStore Sales DataSet.xlsx",
    "source_files": [
      "SuperStore Sales DataSet.xlsx"
    ],
    "combined": false,
    "chat_id": "1755684043422",
    "question": "DATA IS READ-ONLY.\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\n- Reuse existing columns. If you must transform, make a local Series or use df.assign(**with a unique, temporary name**), but prefer locals.\n- Do not write to disk. Just build the plot and return it.\n\nABSOLUTE BAN: do not use DataFrame.insert(), df[\"...\"]=..., or overwrite any column names.\nUse only existing columns; if you need a helper, use a local variable (NOT df.assign).\nIf suitable columns are not obvious, list columns and your picks, then plot.\nUser request: give me bar plot of year 2018 for price and revenue"
  },
  {
    "id": "5a2cc2bdc6fc4449be9f11b24334a896",
    "title": "Pie • Region",
    "kind": "pie",
    "x": "Region",
    "y": "Sales",
    "image_url": "/api/visualizations/5a2cc2bdc6fc4449be9f11b24334a896/image",
    "thumb_url": "/api/visualizations/5a2cc2bdc6fc4449be9f11b24334a896/thumb",
    "created_at": "2025-09-01T06:04:40.085307Z",
    "source_file": "SuperStore Sales DataSet.xlsx",
    "source_files": [
      "SuperStore Sales DataSet.xlsx"
    ],
    "combined": false,
    "chat_id": "1755684043422",
    "question": "DATA IS READ-ONLY.\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\n- Reuse existing columns. If you must transform, make a local Series or use df.assign(**with a unique, temporary name**), but prefer locals.\n- Do not write to disk. Just build the plot and return it.\n\n\nTry to map case-insensitively:\n- sales: sales, sale_amount, revenue, net_sales, sales_amount\n- profit: profit, net_profit, margin, gross_profit, profit_amount\n- salary: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\n- experience: experience, years_experience, years_of_experience, yoe, yrs_exp, exp, experience_years\nClean numbers (strip currency/commas; convert \"10 yrs\" -> 10) before plotting.\n\nCreate exactly the chart user asked (e.g., \"give me pie plot for sale by region\"). If ambiguous, choose the best matching columns and proceed."
  },
  {
    "id": "4ca13a53d6b644f5aa645c47e6207b45",
    "title": "Pie • Region",
    "kind": "pie",
    "x": "Region",
    "y": "Sales",
    "image_url": "/api/visualizations/4ca13a53d6b644f5aa645c47e6207b45/image",
    "thumb_url": "/api/visualizations/4ca13a53d6b644f5aa645c47e6207b45/thumb",
    "created_at": "2025-09-01T05:53:56.185615Z",
    "source_file": "SuperStore Sales DataSet.xlsx",
    "source_files": [
      "SuperStore Sales DataSet.xlsx"
    ],
    "combined": false,
    "chat_id": "1755684043422",
    "question": "DATA IS READ-ONLY.\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\n- Reuse existing columns. If you must transform, make a local Series or use df.assign(**with a unique, temporary name**), but prefer locals.\n- Do not write to disk. Just build the plot and return it.\n\n\nTry to map case-insensitively:\n- sales: sales, sale_amount, revenue, net_sales, sales_amount\n- profit: profit, net_profit, margin, gross_profit, profit_amount\n- salary: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\n- experience: experience, years_experience, years_of_experience, yoe, yrs_exp, exp, experience_years\nClean numbers (strip currency/commas; convert \"10 yrs\" -> 10) before plotting.\n\nCreate exactly the chart user asked (e.g., \"give me pie plot for sale by region\"). If ambiguous, choose the best matching columns and proceed."
  },
  {
    "id": "3f2a84ceada343c0b6d5c989b0156146",
    "title": "Pie • Region",
    "kind": "pie",
    "x": "Region",
    "y": "Sales",
    "image_url": "/api/visualizations/3f2a84ceada343c0b6d5c989b0156146/image",
    "thumb_url": "/api/visualizations/3f2a84ceada343c0b6d5c989b0156146/thumb",
    "created_at": "2025-09-01T05:42:43.033010Z",
    "source_file": "SuperStore Sales DataSet.xlsx",
    "source_files": [
      "SuperStore Sales DataSet.xlsx"
    ],
    "combined": false,
    "chat_id": "1755684043422",
    "question": "DATA IS READ-ONLY.\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\n- Reuse existing columns. If you must transform, make a local Series or use df.assign(**with a unique, temporary name**), but prefer locals.\n- Do not write to disk. Just build the plot and return it.\n\n\nTry to map case-insensitively:\n- sales: sales, sale_amount, revenue, net_sales, sales_amount\n- profit: profit, net_profit, margin, gross_profit, profit_amount\n- salary: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\n- experience: experience, years_experience, years_of_experience, yoe, yrs_exp, exp, experience_years\nClean numbers (strip currency/commas; convert \"10 yrs\" -> 10) before plotting.\n\nCreate exactly the chart user asked (e.g., \"give me pie plot for sale by region\"). If ambiguous, choose the best matching columns and proceed."
  },
  {
    "id": "ae304163079342a8b59ad46abef9b9f4",
    "title": "Pie • Region",
    "kind": "pie",
    "x": "Region",
    "y": "Sales",
    "image_url": "/api/visualizations/ae304163079342a8b59ad46abef9b9f4/image",
    "thumb_url": "/api/visualizations/ae304163079342a8b59ad46abef9b9f4/thumb",
    "created_at": "2025-09-01T05:17:02.223090Z",
    "source_file": "SuperStore Sales DataSet.xlsx",
    "source_files": [
      "SuperStore Sales DataSet.xlsx"
    ],
    "combined": false,
    "chat_id": "1755684043422",
    "question": "DATA IS READ-ONLY.\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\n- Reuse existing columns. If you must transform, make a local Series or use df.assign(**with a unique, temporary name**), but prefer locals.\n- Do not write to disk. Just build the plot and return it.\n\n\nTry to map case-insensitively:\n- sales: sales, sale_amount, revenue, net_sales, sales_amount\n- profit: profit, net_profit, margin, gross_profit, profit_amount\n- salary: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\n- experience: experience, years_experience, years_of_experience, yoe, yrs_exp, exp, experience_years\nClean numbers (strip currency/commas; convert \"10 yrs\" -> 10) before plotting.\n\nCreate exactly the chart user asked (e.g., \"give me pie plot for sale by region\"). If ambiguous, choose the best matching columns and proceed."
  },
  {
    "id": "7553ce44e4634dcd85e8a00e059b2b67",
    "title": "Pie • Region",
    "kind": "pie",
    "x": "Region",
    "y": "Sales",
    "image_url": "/api/visualizations/7553ce44e4634dcd85e8a00e059b2b67/image",
    "thumb_url": "/api/visualizations/7553ce44e4634dcd85e8a00e059b2b67/thumb",
    "created_at": "2025-09-01T04:55:46.883804Z",
    "source_file": "SuperStore Sales DataSet.xlsx",
    "source_files": [
      "SuperStore Sales DataSet.xlsx"
    ],
    "combined": false,
    "chat_id": "1755684043422",
    "question": "DATA IS READ-ONLY.\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\n- Reuse existing columns. If you must transform, make a local Series or use df.assign(**with a unique, temporary name**), but prefer locals.\n- Do not write to disk. Just build the plot and return it.\n\n\nTry to map case-insensitively:\n- sales: sales, sale_amount, revenue, net_sales, sales_amount\n- profit: profit, net_profit, margin, gross_profit, profit_amount\n- salary: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\n- experience: experience, years_experience, years_of_experience, yoe, yrs_exp, exp, experience_years\nClean numbers (strip currency/commas; convert \"10 yrs\" -> 10) before plotting.\n\nCreate exactly the chart user asked (e.g., \"give me pie plot for sale by region\"). If ambiguous, choose the best matching columns and proceed."
  },
  {
    "id": "6e47c11c25194eb399c1bf85a63a1352",
    "title": "Pie • Region",
    "kind": "pie",
    "x": "Region",
    "y": "Sales",
    "image_url": "/api/visualizations/6e47c11c25194eb399c1bf85a63a1352/image",
    "thumb_url": "/api/visualizations/6e47c11c25194eb399c1bf85a63a1352/thumb",
    "created_at": "2025-09-01T04:36:35.069863Z",
    "source_file": "SuperStore Sales DataSet.xlsx",
    "source_files": [
      "SuperStore Sales DataSet.xlsx"
    ],
    "combined": false,
    "chat_id": "1755684043422",
    "question": "DATA IS READ-ONLY.\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\n- Reuse existing columns. If you must transform, make a local Series or use df.assign(**with a unique, temporary name**), but prefer locals.\n- Do not write to disk. Just build the plot and return it.\n\n\nTry to map case-insensitively:\n- sales: sales, sale_amount, revenue, net_sales, sales_amount\n- profit: profit, net_profit, margin, gross_profit, profit_amount\n- salary: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\n- experience: experience, years_experience, years_of_experience, yoe, yrs_exp, exp, experience_years\nClean numbers (strip currency/commas; convert \"10 yrs\" -> 10) before plotting.\n\nCreate exactly the chart user asked (e.g., \"give me pie plot for sale by region\"). If ambiguous, choose the best matching columns and proceed."
  },
  {
    "id": "6c7cd1a174f04d009c87d2d3bff6b0f7",
    "title": "Pie • State",
    "kind": "pie",
    "x": "State",
    "y": "Sales",
    "image_url": "/api/visualizations/6c7cd1a174f04d009c87d2d3bff6b0f7/image",
    "thumb_url": "/api/visualizations/6c7cd1a174f04d009c87d2d3bff6b0f7/thumb",
    "created_at": "2025-08-27T07:20:20.797327Z",
    "source_file": "single_product_region_category.xlsx",
    "source_files": [
      "single_product_region_category.xlsx"
    ],
    "combined": false,
    "chat_id": "1755847384537"
  },
  {
    "id": "492c8ab4854747de8f91e761b3bc572b",
    "title": "Pie • Revenue",
    "kind": "pie",
    "x": "Revenue",
    "y": "Sales",
    "image_url": "/api/visualizations/492c8ab4854747de8f91e761b3bc572b/image",
    "thumb_url": "/api/visualizations/492c8ab4854747de8f91e761b3bc572b/thumb",
    "created_at": "2025-08-26T12:22:14.891887Z",
    "source_file": "single_product_region_category.xlsx",
    "source_files": [
      "single_product_region_category.xlsx"
    ],
    "combined": false,
    "chat_id": "1755847384537"
  },
  {
    "id": "034de90b62294a7e8c4e25d71ae108db",
    "title": "Pie • State",
    "kind": "pie",
    "x": "State",
    "y": "Sales",
    "image_url": "/api/visualizations/034de90b62294a7e8c4e25d71ae108db/image",
    "thumb_url": "/api/visualizations/034de90b62294a7e8c4e25d71ae108db/thumb",
    "created_at": "2025-08-25T12:00:42.898212Z",
    "source_file": "single_product_region_category.xlsx",
    "source_files": [
      "single_product_region_category.xlsx"
    ],
    "combined": false,
    "chat_id": "1755847384537"
  },
  {
    "id": "7cfacb17b6f54333bb80e705e6a4b722",
    "title": "Pie • State",
    "kind": "pie",
    "x": "State",
    "y": "Sales",
    "image_url": "/api/visualizations/7cfacb17b6f54333bb80e705e6a4b722/image",
    "thumb_url": "/api/visualizations/7cfacb17b6f54333bb80e705e6a4b722/thumb",
    "created_at": "2025-08-25T10:27:41.988394Z",
    "source_file": "single_product_region_category.xlsx",
    "source_files": [
      "single_product_region_category.xlsx"
    ],
    "combined": false,
    "chat_id": "1755847384537"
  },
  {
    "id": "bd6f5d8128f547a5bc240dd4823fb154",
    "title": "Pie • State",
    "kind": "pie",
    "x": "State",
    "y": "Sales",
    "image_url": "/api/visualizations/bd6f5d8128f547a5bc240dd4823fb154/image",
    "thumb_url": "/api/visualizations/bd6f5d8128f547a5bc240dd4823fb154/thumb",
    "created_at": "2025-08-25T10:13:01.523335Z",
    "source_file": "single_product_region_category.xlsx",
    "source_files": [
      "single_product_region_category.xlsx"
    ],
    "combined": false,
    "chat_id": "1755847384537"
  },
  {
    "id": "b7c9e651ac3c4d9ba3946524d0c890a6",
    "title": "Pie • State",
    "kind": "pie",
    "x": "State",
    "y": "Sales",
    "image_url": "/api/visualizations/b7c9e651ac3c4d9ba3946524d0c890a6/image",
    "thumb_url": "/api/visualizations/b7c9e651ac3c4d9ba3946524d0c890a6/thumb",
    "created_at": "2025-08-25T10:12:57.481905Z",
    "source_file": "single_product_region_category.xlsx",
    "source_files": [
      "single_product_region_category.xlsx"
    ],
    "combined": false,
    "chat_id": "1755847384537"
  },
  {
    "id": "fbfd3257d7734687be90408c9327a1c4",
    "title": "Pie • Payment Mode",
    "kind": "pie",
    "x": "Payment Mode",
    "y": "Sales",
    "image_url": "/api/visualizations/fbfd3257d7734687be90408c9327a1c4/image",
    "thumb_url": "/api/visualizations/fbfd3257d7734687be90408c9327a1c4/thumb",
    "created_at": "2025-08-23T18:18:07.904745Z",
    "source_file": "SuperStore Sales DataSet.xlsx",
    "source_files": [
      "SuperStore Sales DataSet.xlsx"
    ],
    "combined": false,
    "chat_id": "1755972916717"
  },
  {
    "id": "e650dc2a158544be9291a24decc609c3",
    "title": "Box • Payment Mode",
    "kind": "box",
    "x": "Payment Mode",
    "y": "Sales",
    "image_url": "/api/visualizations/e650dc2a158544be9291a24decc609c3/image",
    "thumb_url": "/api/visualizations/e650dc2a158544be9291a24decc609c3/thumb",
    "created_at": "2025-08-23T18:17:44.782180Z",
    "source_file": "SuperStore Sales DataSet.xlsx",
    "source_files": [
      "SuperStore Sales DataSet.xlsx"
    ],
    "combined": false,
    "chat_id": "1755972916717"
  },
  {
    "id": "a57de5aa76c645afb586baaaf1c31781",
    "title": "Bar • Sales,Profit vs Payment Mode",
    "kind": "bar",
    "x": "Payment Mode",
    "y": "Sales,Profit",
    "image_url": "/api/visualizations/a57de5aa76c645afb586baaaf1c31781/image",
    "thumb_url": "/api/visualizations/a57de5aa76c645afb586baaaf1c31781/thumb",
    "created_at": "2025-08-23T18:16:52.973357Z",
    "source_file": "SuperStore Sales DataSet.xlsx",
    "source_files": [
      "SuperStore Sales DataSet.xlsx"
    ],
    "combined": false,
    "chat_id": "1755972916717"
  },
  {
    "id": "1bc79a4f08544713813fb4be1a81b231",
    "title": "Pie • Region",
    "kind": "pie",
    "x": "Region",
    "y": "Sales",
    "image_url": "/api/visualizations/1bc79a4f08544713813fb4be1a81b231/image",
    "thumb_url": "/api/visualizations/1bc79a4f08544713813fb4be1a81b231/thumb",
    "created_at": "2025-08-22T11:55:14.881131Z",
    "source_file": "SuperStore Sales DataSet.xlsx",
    "source_files": [
      "SuperStore Sales DataSet.xlsx"
    ],
    "combined": false,
    "chat_id": "1755684043422"
  },
  {
    "id": "b58c63586fc44682a1f1f6d0cfd90788",
    "title": "Pie • State",
    "kind": "pie",
    "x": "State",
    "y": "Sales",
    "image_url": "/api/visualizations/b58c63586fc44682a1f1f6d0cfd90788/image",
    "thumb_url": "/api/visualizations/b58c63586fc44682a1f1f6d0cfd90788/thumb",
    "created_at": "2025-08-22T11:03:19.864096Z",
    "source_file": "single_product_region_category.xlsx",
    "source_files": [
      "single_product_region_category.xlsx"
    ],
    "combined": false,
    "chat_id": "1755847384537"
  },
  {
    "id": "e72644c412764c9fbef2341283cef5bf",
    "title": "Pie • State",
    "kind": "pie",
    "x": "State",
    "y": "Sales",
    "image_url": "/api/visualizations/e72644c412764c9fbef2341283cef5bf/image",
    "thumb_url": "/api/visualizations/e72644c412764c9fbef2341283cef5bf/thumb",
    "created_at": "2025-08-22T10:52:38.334358Z",
    "source_file": "single_product_region_category.xlsx",
    "source_files": [
      "single_product_region_category.xlsx"
    ],
    "combined": false,
    "chat_id": "1755847384537"
  },
  {
    "id": "d7d049882ca44aa9b7ad9b4528ca2f27",
    "title": "Pie • Year",
    "kind": "pie",
    "x": "Year",
    "y": "Sales",
    "image_url": "/api/visualizations/d7d049882ca44aa9b7ad9b4528ca2f27/image",
    "thumb_url": "/api/visualizations/d7d049882ca44aa9b7ad9b4528ca2f27/thumb",
    "created_at": "2025-08-22T10:51:15.505541Z",
    "source_file": "single_product_region_category.xlsx",
    "source_files": [
      "single_product_region_category.xlsx"
    ],
    "combined": false,
    "chat_id": "1755847384537"
  },
  {
    "id": "b6b7541e8aa1444695c004c94d2c6635",
    "title": "Pie • State",
    "kind": "pie",
    "x": "State",
    "y": "Sales",
    "image_url": "/api/visualizations/b6b7541e8aa1444695c004c94d2c6635/image",
    "thumb_url": "/api/visualizations/b6b7541e8aa1444695c004c94d2c6635/thumb",
    "created_at": "2025-08-22T10:30:56.751363Z",
    "source_file": "single_product_region_category.xlsx",
    "source_files": [
      "single_product_region_category.xlsx"
    ],
    "combined": false,
    "chat_id": "1755847384537"
  },
  {
    "id": "4fc4875ad4054270a54c74924dc47277",
    "title": "Pie • Payment Mode",
    "kind": "pie",
    "x": "Payment Mode",
    "y": "Sales",
    "image_url": "/api/visualizations/4fc4875ad4054270a54c74924dc47277/image",
    "thumb_url": "/api/visualizations/4fc4875ad4054270a54c74924dc47277/thumb",
    "created_at": "2025-08-22T10:30:26.181064Z",
    "source_file": "single_product_region_category.xlsx",
    "source_files": [
      "single_product_region_category.xlsx"
    ],
    "combined": false,
    "chat_id": "1755847384537"
  },
  {
    "id": "d970102c08dd4e349251446fa055e844",
    "title": "Pie • State",
    "kind": "pie",
    "x": "State",
    "y": "Sales",
    "image_url": "/api/visualizations/d970102c08dd4e349251446fa055e844/image",
    "thumb_url": "/api/visualizations/d970102c08dd4e349251446fa055e844/thumb",
    "created_at": "2025-08-22T10:21:49.435022Z",
    "source_file": "single_product_region_category.xlsx",
    "source_files": [
      "single_product_region_category.xlsx"
    ],
    "combined": false,
    "chat_id": "1755847384537"
  },
  {
    "id": "4639e49ea2c24fb68b676981ad826c4a",
    "title": "Pie • State",
    "kind": "pie",
    "x": "State",
    "y": "Sales",
    "image_url": "/api/visualizations/4639e49ea2c24fb68b676981ad826c4a/image",
    "thumb_url": "/api/visualizations/4639e49ea2c24fb68b676981ad826c4a/thumb",
    "created_at": "2025-08-22T10:19:22.369303Z",
    "source_file": "single_product_region_category.xlsx",
    "source_files": [
      "single_product_region_category.xlsx"
    ],
    "combined": false,
    "chat_id": "1755847384537"
  },
  {
    "id": "72a0de722d674d78a9684164159e1555",
    "title": "Pie • Region",
    "kind": "pie",
    "x": "Region",
    "y": "Sales",
    "image_url": "/api/visualizations/72a0de722d674d78a9684164159e1555/image",
    "thumb_url": "/api/visualizations/72a0de722d674d78a9684164159e1555/thumb",
    "created_at": "2025-08-22T10:10:48.441807Z",
    "source_file": "single_product_region_category.xlsx",
    "source_files": [
      "single_product_region_category.xlsx"
    ],
    "combined": false,
    "chat_id": "1755847384537"
  },
  {
    "id": "6c9f7b44a67d41669d38ae22b8d65b4f",
    "title": "Box • Region",
    "kind": "box",
    "x": "Region",
    "y": "Sales",
    "image_url": "/api/visualizations/6c9f7b44a67d41669d38ae22b8d65b4f/image",
    "thumb_url": "/api/visualizations/6c9f7b44a67d41669d38ae22b8d65b4f/thumb",
    "created_at": "2025-08-22T10:10:18.250832Z",
    "source_file": "single_product_region_category.xlsx",
    "source_files": [
      "single_product_region_category.xlsx"
    ],
    "combined": false,
    "chat_id": "1755847384537"
  },
  {
    "id": "dffd2e5a5a3b411eae982a720ea549c0",
    "title": "Line • Sales vs Region",
    "kind": "line",
    "x": "Region",
    "y": "Sales",
    "image_url": "/api/visualizations/dffd2e5a5a3b411eae982a720ea549c0/image",
    "thumb_url": "/api/visualizations/dffd2e5a5a3b411eae982a720ea549c0/thumb",
    "created_at": "2025-08-22T10:09:32.457452Z",
    "source_file": "single_product_region_category.xlsx",
    "source_files": [
      "single_product_region_category.xlsx"
    ],
    "combined": false,
    "chat_id": "1755847384537"
  },
  {
    "id": "7b95be8b957c4e57882f3f8d093ef47b",
    "title": "Bar • Sales,Profit vs Region",
    "kind": "bar",
    "x": "Region",
    "y": "Sales,Profit",
    "image_url": "/api/visualizations/7b95be8b957c4e57882f3f8d093ef47b/image",
    "thumb_url": "/api/visualizations/7b95be8b957c4e57882f3f8d093ef47b/thumb",
    "created_at": "2025-08-22T07:24:36.968972Z",
    "source_file": "single_product_region_category.xlsx",
    "source_files": [
      "single_product_region_category.xlsx"
    ],
    "combined": false,
    "chat_id": "1755847384537"
  },
  {
    "id": "1d7c72dfaca04e8c87b6fc4b966c190c",
    "title": "Hist • Price",
    "kind": "hist",
    "x": "Price",
    "y": "frequency",
    "image_url": "/api/visualizations/1d7c72dfaca04e8c87b6fc4b966c190c/image",
    "thumb_url": "/api/visualizations/1d7c72dfaca04e8c87b6fc4b966c190c/thumb",
    "created_at": "2025-08-22T07:20:41.685192Z",
    "source_file": "Updated_SuperStore_Sales_with_Price.xlsx",
    "source_files": [
      "Updated_SuperStore_Sales_with_Price.xlsx"
    ],
    "combined": false,
    "chat_id": "1755684043422"
  },
  {
    "id": "2ea785169c604c459694d249b8bdf9f0",
    "title": "Bar • Sales,Price vs Region",
    "kind": "bar",
    "x": "Region",
    "y": "Sales,Price",
    "image_url": "/api/visualizations/2ea785169c604c459694d249b8bdf9f0/image",
    "thumb_url": "/api/visualizations/2ea785169c604c459694d249b8bdf9f0/thumb",
    "created_at": "2025-08-22T07:14:48.801611Z",
    "source_file": "Updated_SuperStore_Sales_with_Price.xlsx",
    "source_files": [
      "Updated_SuperStore_Sales_with_Price.xlsx"
    ],
    "combined": false,
    "chat_id": "1755684043422"
  },
  {
    "id": "493fca2d407d44878a57789dbd7ef895",
    "title": "Bar • Sales,Price vs Region",
    "kind": "bar",
    "x": "Region",
    "y": "Sales,Price",
    "image_url": "/api/visualizations/493fca2d407d44878a57789dbd7ef895/image",
    "thumb_url": "/api/visualizations/493fca2d407d44878a57789dbd7ef895/thumb",
    "created_at": "2025-08-22T06:56:15.643252Z",
    "source_file": "Updated_SuperStore_Sales_with_Price.xlsx",
    "source_files": [
      "Updated_SuperStore_Sales_with_Price.xlsx"
    ],
    "combined": false,
    "chat_id": "1755684043422"
  },
  {
    "id": "98dd21c906d04e0fb2866fc9324e68ee",
    "title": "Bar • Sales,Profit vs Region",
    "kind": "bar",
    "x": "Region",
    "y": "Sales,Profit",
    "image_url": "/api/visualizations/98dd21c906d04e0fb2866fc9324e68ee/image",
    "thumb_url": "/api/visualizations/98dd21c906d04e0fb2866fc9324e68ee/thumb",
    "created_at": "2025-08-22T06:55:24.390678Z",
    "source_file": "SuperStore Sales DataSet.xlsx",
    "source_files": [
      "SuperStore Sales DataSet.xlsx"
    ],
    "combined": false,
    "chat_id": "1755684043422"
  },
  {
    "id": "ad2486efad184adb9b3f1167db796d54",
    "title": "Bar • Price,Sales vs Region",
    "kind": "bar",
    "x": "Region",
    "y": "Price,Sales",
    "image_url": "/api/visualizations/ad2486efad184adb9b3f1167db796d54/image",
    "thumb_url": "/api/visualizations/ad2486efad184adb9b3f1167db796d54/thumb",
    "created_at": "2025-08-22T06:40:38.554834Z",
    "source_file": "Updated_SuperStore_Sales_with_Price.xlsx",
    "source_files": [
      "Updated_SuperStore_Sales_with_Price.xlsx"
    ],
    "combined": false,
    "chat_id": "1755684043422"
  },
  {
    "id": "74290eb3ff43466c9ea6fbe5ce0de887",
    "title": "Donut • Sales,Profit vs Region",
    "kind": "donut",
    "x": "Region",
    "y": "Sales,Profit",
    "image_url": "/api/visualizations/74290eb3ff43466c9ea6fbe5ce0de887/image",
    "thumb_url": "/api/visualizations/74290eb3ff43466c9ea6fbe5ce0de887/thumb",
    "created_at": "2025-08-22T06:37:24.396482Z",
    "source_file": "SuperStore Sales DataSet.xlsx",
    "source_files": [
      "SuperStore Sales DataSet.xlsx"
    ],
    "combined": false,
    "chat_id": "1755684043422"
  },
  {
    "id": "c10ef7527e66434e9490d2d69f1d24fd",
    "title": "Donut • Sales,Profit vs Region",
    "kind": "donut",
    "x": "Region",
    "y": "Sales,Profit",
    "image_url": "/api/visualizations/c10ef7527e66434e9490d2d69f1d24fd/image",
    "thumb_url": "/api/visualizations/c10ef7527e66434e9490d2d69f1d24fd/thumb",
    "created_at": "2025-08-22T06:22:10.331619Z",
    "source_file": "SuperStore Sales DataSet.xlsx",
    "source_files": [
      "SuperStore Sales DataSet.xlsx"
    ],
    "combined": false,
    "chat_id": "1755684043422"
  },
  {
    "id": "3333b51f51894e67982418509053972a",
    "title": "Donut • Sales,Profit vs Region",
    "kind": "donut",
    "x": "Region",
    "y": "Sales,Profit",
    "image_url": "/api/visualizations/3333b51f51894e67982418509053972a/image",
    "thumb_url": "/api/visualizations/3333b51f51894e67982418509053972a/thumb",
    "created_at": "2025-08-22T06:11:42.447032Z",
    "source_file": "SuperStore Sales DataSet.xlsx",
    "source_files": [
      "SuperStore Sales DataSet.xlsx"
    ],
    "combined": false,
    "chat_id": "1755684043422"
  },
  {
    "id": "9c2eb2de140f44029ddabbc566b68b9b",
    "title": "Donut • Sales,Profit vs Region",
    "kind": "donut",
    "x": "Region",
    "y": "Sales,Profit",
    "image_url": "/api/visualizations/9c2eb2de140f44029ddabbc566b68b9b/image",
    "thumb_url": "/api/visualizations/9c2eb2de140f44029ddabbc566b68b9b/thumb",
    "created_at": "2025-08-22T05:58:01.173889Z",
    "source_file": "SuperStore Sales DataSet.xlsx",
    "source_files": [
      "SuperStore Sales DataSet.xlsx"
    ],
    "combined": false,
    "chat_id": "1755684043422"
  },
  {
    "id": "06b88c81293741599b65f454fae18995",
    "title": "Box • Sales",
    "kind": "box",
    "x": "Sales",
    "y": null,
    "image_url": "/api/visualizations/06b88c81293741599b65f454fae18995/image",
    "thumb_url": "/api/visualizations/06b88c81293741599b65f454fae18995/thumb",
    "created_at": "2025-08-21T11:52:10.096906Z",
    "source_file": "SuperStore Sales DataSet.xlsx",
    "source_files": [
      "SuperStore Sales DataSet.xlsx"
    ],
    "combined": false,
    "chat_id": "1755684043422"
  },
  {
    "id": "7701d17243f443669efbccfba766d7f2",
    "title": "Bar • Profit vs Sales",
    "kind": "bar",
    "x": "Sales",
    "y": "Profit",
    "image_url": "/api/visualizations/7701d17243f443669efbccfba766d7f2/image",
    "thumb_url": "/api/visualizations/7701d17243f443669efbccfba766d7f2/thumb",
    "created_at": "2025-08-21T11:51:50.617058Z",
    "source_file": "SuperStore Sales DataSet.xlsx",
    "source_files": [
      "SuperStore Sales DataSet.xlsx"
    ],
    "combined": false,
    "chat_id": "1755684043422"
  },
  {
    "id": "606cd64bdb1e429eab6f9364d444fad0",
    "title": "Line • Profit vs Sales",
    "kind": "line",
    "x": "Sales",
    "y": "Profit",
    "image_url": "/api/visualizations/606cd64bdb1e429eab6f9364d444fad0/image",
    "thumb_url": "/api/visualizations/606cd64bdb1e429eab6f9364d444fad0/thumb",
    "created_at": "2025-08-21T11:51:24.588958Z",
    "source_file": "SuperStore Sales DataSet.xlsx",
    "source_files": [
      "SuperStore Sales DataSet.xlsx"
    ],
    "combined": false,
    "chat_id": "1755684043422"
  },
  {
    "id": "9369b56d308d4201be4e11de120bd193",
    "title": "Pie • Sales",
    "kind": "pie",
    "x": "Sales",
    "y": null,
    "image_url": "/api/visualizations/9369b56d308d4201be4e11de120bd193/image",
    "thumb_url": "/api/visualizations/9369b56d308d4201be4e11de120bd193/thumb",
    "created_at": "2025-08-21T11:49:21.023577Z",
    "source_file": "SuperStore Sales DataSet.xlsx",
    "source_files": [
      "SuperStore Sales DataSet.xlsx"
    ],
    "combined": false,
    "chat_id": "1755684043422"
  },
  {
    "id": "bf6bba0e0e50416087b65dbb846edc20",
    "title": "Bar • Profit vs Sales",
    "kind": "bar",
    "x": "Sales",
    "y": "Profit",
    "image_url": "/api/visualizations/bf6bba0e0e50416087b65dbb846edc20/image",
    "thumb_url": "/api/visualizations/bf6bba0e0e50416087b65dbb846edc20/thumb",
    "created_at": "2025-08-11T12:27:49.369393Z",
    "source_file": "SuperStore Sales DataSet.xlsx",
    "chat_id": "me732iy6n7xaqyzlgk"
  }
]