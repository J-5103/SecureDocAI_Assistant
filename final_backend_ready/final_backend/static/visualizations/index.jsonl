{"id": "d1ead983fdda4fd4b266f378c2c5f5d9", "kind": "line", "title": "Line of Sales by Category", "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n(Feel free to use other obvious matches when present.)\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"give me line plot for payment mode and sales\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart.", "chat_id": "1756883857787", "x": "Category", "y": "Sales", "created_at": "2025-09-04T12:38:44.836878", "dataset_path": "E:\\SecureDocAI\\final_backend_ready\\final_backend\\uploaded_excels\\1756883857787\\SuperStore Sales DataSet.xlsx", "table": [{"Category": "Office Supplies", "Sales": 643707.687}, {"Category": "Technology", "Sales": 470587.991}, {"Category": "Furniture", "Sales": 451508.6452}], "table_preview": [{"Category": "Office Supplies", "Sales": 643707.687}, {"Category": "Technology", "Sales": 470587.991}, {"Category": "Furniture", "Sales": 451508.6452}]}
{"id": "42e57b8cdd45499f8a354fffc10b39a7", "kind": "pie", "title": "Pie of Sales by Category", "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n(Feel free to use other obvious matches when present.)\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"give me pie plot for profit and region\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart.", "chat_id": "1756883857787", "x": "Category", "y": "Sales", "created_at": "2025-09-04T12:39:13.641206", "dataset_path": "E:\\SecureDocAI\\final_backend_ready\\final_backend\\uploaded_excels\\1756883857787\\SuperStore Sales DataSet.xlsx", "table": [{"Category": "Office Supplies", "Sales": 643707.687}, {"Category": "Technology", "Sales": 470587.991}, {"Category": "Furniture", "Sales": 451508.6452}], "table_preview": [{"Category": "Office Supplies", "Sales": 643707.687}, {"Category": "Technology", "Sales": 470587.991}, {"Category": "Furniture", "Sales": 451508.6452}]}
{"id": "3e14d798d1ff4675b97902c3333150ca", "kind": "bar", "title": "Bar of Sales by Region", "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n(Feel free to use other obvious matches when present.)\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"give me bar plot of Sales by Region\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart.", "chat_id": "1756883857787", "x": "Region", "y": "Sales", "created_at": "2025-09-04T12:39:35.355355", "dataset_path": "E:\\SecureDocAI\\final_backend_ready\\final_backend\\uploaded_excels\\1756883857787\\SuperStore Sales DataSet.xlsx", "table": [{"Region": "West", "Sales": 522441.052}, {"Region": "East", "Sales": 450234.666}, {"Region": "Central", "Sales": 341007.5242}, {"Region": "South", "Sales": 252121.081}], "table_preview": [{"Region": "West", "Sales": 522441.052}, {"Region": "East", "Sales": 450234.666}, {"Region": "Central", "Sales": 341007.5242}, {"Region": "South", "Sales": 252121.081}]}
{"id": "b424d8a34ff0479f93bf42c6e79989cc", "kind": "hist", "title": "Hist of Sales by Region", "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n(Feel free to use other obvious matches when present.)\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"give me hist plot of Sales by Region\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart.", "chat_id": "1756883857787", "x": "Region", "y": "Sales", "created_at": "2025-09-04T12:39:51.679859", "dataset_path": "E:\\SecureDocAI\\final_backend_ready\\final_backend\\uploaded_excels\\1756883857787\\SuperStore Sales DataSet.xlsx", "table": [{"bin_start": 0.836, "bin_end": 182.81788000000003, "count": 3990}, {"bin_start": 182.81788000000003, "bin_end": 364.79976000000005, "count": 837}, {"bin_start": 364.79976000000005, "bin_end": 546.78164, "count": 434}, {"bin_start": 546.78164, "bin_end": 728.7635200000001, "count": 195}, {"bin_start": 728.7635200000001, "bin_end": 910.7454000000001, "count": 115}, {"bin_start": 910.7454000000001, "bin_end": 1092.72728, "count": 89}, {"bin_start": 1092.72728, "bin_end": 1274.70916, "count": 46}, {"bin_start": 1274.70916, "bin_end": 1456.6910400000002, "count": 45}, {"bin_start": 1456.6910400000002, "bin_end": 1638.6729200000002, "count": 32}, {"bin_start": 1638.6729200000002, "bin_end": 1820.6548000000003, "count": 20}, {"bin_start": 1820.6548000000003, "bin_end": 2002.6366800000003, "count": 16}, {"bin_start": 2002.6366800000003, "bin_end": 2184.61856, "count": 11}, {"bin_start": 2184.61856, "bin_end": 2366.60044, "count": 9}, {"bin_start": 2366.60044, "bin_end": 2548.58232, "count": 12}, {"bin_start": 2548.58232, "bin_end": 2730.5642000000003, "count": 5}, {"bin_start": 2730.5642000000003, "bin_end": 2912.54608, "count": 7}, {"bin_start": 2912.54608, "bin_end": 3094.52796, "count": 7}, {"bin_start": 3094.52796, "bin_end": 3276.50984, "count": 2}, {"bin_start": 3276.50984, "bin_end": 3458.49172, "count": 6}, {"bin_start": 3458.49172, "bin_end": 3640.4736000000003, "count": 1}, {"bin_start": 3640.4736000000003, "bin_end": 3822.45548, "count": 0}, {"bin_start": 3822.45548, "bin_end": 4004.4373600000004, "count": 2}, {"bin_start": 4004.4373600000004, "bin_end": 4186.419240000001, "count": 1}, {"bin_start": 4186.419240000001, "bin_end": 4368.40112, "count": 3}, {"bin_start": 4368.40112, "bin_end": 4550.383000000001, "count": 5}, {"bin_start": 4550.383000000001, "bin_end": 4732.364880000001, "count": 1}, {"bin_start": 4732.364880000001, "bin_end": 4914.34676, "count": 4}, {"bin_start": 4914.34676, "bin_end": 5096.328640000001, "count": 0}, {"bin_start": 5096.328640000001, "bin_end": 5278.310520000001, "count": 2}, {"bin_start": 5278.310520000001, "bin_end": 5460.292400000001, "count": 2}, {"bin_start": 5460.292400000001, "bin_end": 5642.2742800000005, "count": 1}, {"bin_start": 5642.2742800000005, "bin_end": 5824.256160000001, "count": 0}, {"bin_start": 5824.256160000001, "bin_end": 6006.238040000001, "count": 0}, {"bin_start": 6006.238040000001, "bin_end": 6188.2199200000005, "count": 0}, {"bin_start": 6188.2199200000005, "bin_end": 6370.201800000001, "count": 0}, {"bin_start": 6370.201800000001, "bin_end": 6552.183680000001, "count": 0}, {"bin_start": 6552.183680000001, "bin_end": 6734.165560000001, "count": 0}, {"bin_start": 6734.165560000001, "bin_end": 6916.147440000001, "count": 0}, {"bin_start": 6916.147440000001, "bin_end": 7098.129320000001, "count": 0}, {"bin_start": 7098.129320000001, "bin_end": 7280.111200000001, "count": 0}, {"bin_start": 7280.111200000001, "bin_end": 7462.093080000001, "count": 0}, {"bin_start": 7462.093080000001, "bin_end": 7644.074960000001, "count": 0}, {"bin_start": 7644.074960000001, "bin_end": 7826.056840000001, "count": 0}, {"bin_start": 7826.056840000001, "bin_end": 8008.038720000001, "count": 0}, {"bin_start": 8008.038720000001, "bin_end": 8190.020600000001, "count": 0}, {"bin_start": 8190.020600000001, "bin_end": 8372.002480000001, "count": 0}, {"bin_start": 8372.002480000001, "bin_end": 8553.98436, "count": 0}, {"bin_start": 8553.98436, "bin_end": 8735.96624, "count": 0}, {"bin_start": 8735.96624, "bin_end": 8917.948120000001, "count": 0}, {"bin_start": 8917.948120000001, "bin_end": 9099.93, "count": 1}], "table_preview": [{"bin_start": 0.836, "bin_end": 182.81788000000003, "count": 3990}, {"bin_start": 182.81788000000003, "bin_end": 364.79976000000005, "count": 837}, {"bin_start": 364.79976000000005, "bin_end": 546.78164, "count": 434}, {"bin_start": 546.78164, "bin_end": 728.7635200000001, "count": 195}, {"bin_start": 728.7635200000001, "bin_end": 910.7454000000001, "count": 115}, {"bin_start": 910.7454000000001, "bin_end": 1092.72728, "count": 89}, {"bin_start": 1092.72728, "bin_end": 1274.70916, "count": 46}, {"bin_start": 1274.70916, "bin_end": 1456.6910400000002, "count": 45}, {"bin_start": 1456.6910400000002, "bin_end": 1638.6729200000002, "count": 32}, {"bin_start": 1638.6729200000002, "bin_end": 1820.6548000000003, "count": 20}]}
{"id": "88c5e6ec7e754273b3b832b105335d58", "kind": "scatter", "title": "Scatter of Profit by Sales", "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n(Feel free to use other obvious matches when present.)\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"give me scatter plot for payment mode and sales\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart.", "chat_id": "1756883857787", "x": "Sales", "y": "Profit", "created_at": "2025-09-04T12:40:15.506466", "dataset_path": "E:\\SecureDocAI\\final_backend_ready\\final_backend\\uploaded_excels\\1756883857787\\SuperStore Sales DataSet.xlsx", "table": [{"points": 5000, "correlation": 0.30910727129558613}], "table_preview": [{"points": 5000, "correlation": 0.30910727129558613}]}
{"id": "51dc0a847d5740bf803d209707b90fcd", "kind": "box", "title": "Box of Sales by Category", "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n(Feel free to use other obvious matches when present.)\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"give me box plot for payment mode and sales\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart.", "chat_id": "1756883857787", "x": "Category", "y": "Sales", "created_at": "2025-09-04T12:40:40.609295", "dataset_path": "E:\\SecureDocAI\\final_backend_ready\\final_backend\\uploaded_excels\\1756883857787\\SuperStore Sales DataSet.xlsx", "table": [{"Category": "Furniture", "count": 1249, "median": 209.88, "q1": 113.976, "q3": 436.672}, {"Category": "Office Supplies", "count": 3569, "median": 111.96, "q1": 36.48, "q3": 152.01}, {"Category": "Technology", "count": 1083, "median": 188.8, "q1": 118.905, "q3": 441.42}], "table_preview": [{"Category": "Furniture", "count": 1249, "median": 209.88, "q1": 113.976, "q3": 436.672}, {"Category": "Office Supplies", "count": 3569, "median": 111.96, "q1": 36.48, "q3": 152.01}, {"Category": "Technology", "count": 1083, "median": 188.8, "q1": 118.905, "q3": 441.42}]}
{"id": "49af578c5bce440981309b04c45c8275", "kind": "scatter", "title": "Scatter of Profit by Sales", "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n(Feel free to use other obvious matches when present.)\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"give me scatter plot for payment mode and sales\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart.", "chat_id": "1756883857787", "x": "Sales", "y": "Profit", "created_at": "2025-09-04T12:54:26.891533", "dataset_path": "E:\\SecureDocAI\\final_backend_ready\\final_backend\\uploaded_excels\\1756883857787\\SuperStore Sales DataSet.xlsx", "table": [{"points": 5000, "correlation": 0.30910727129558613}], "table_preview": [{"points": 5000, "correlation": 0.30910727129558613}]}
{"id": "0724729b2f5d48f68a98f085f2251f73", "kind": "pie", "title": "Pie of Sales by Category", "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n(Feel free to use other obvious matches when present.)\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"give me pie plot for profit and region\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart.", "chat_id": "1756883857787", "x": "Category", "y": "Sales", "created_at": "2025-09-04T12:54:54.685752", "dataset_path": "E:\\SecureDocAI\\final_backend_ready\\final_backend\\uploaded_excels\\1756883857787\\SuperStore Sales DataSet.xlsx", "table": [{"Category": "Office Supplies", "Sales": 643707.687}, {"Category": "Technology", "Sales": 470587.991}, {"Category": "Furniture", "Sales": 451508.6452}], "table_preview": [{"Category": "Office Supplies", "Sales": 643707.687}, {"Category": "Technology", "Sales": 470587.991}, {"Category": "Furniture", "Sales": 451508.6452}]}
{"id": "659711d135844f3fbf0e5f2952692b23", "kind": "pie", "title": "Pie of Sales by Category", "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n(Feel free to use other obvious matches when present.)\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"give me pie plot for profit and region\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart.", "chat_id": "1756883857787", "x": "Category", "y": "Sales", "created_at": "2025-09-04T13:07:22.001970", "dataset_path": "E:\\SecureDocAI\\final_backend_ready\\final_backend\\uploaded_excels\\1756883857787\\SuperStore Sales DataSet.xlsx", "table": [{"Category": "Office Supplies", "Sales": 643707.687}, {"Category": "Technology", "Sales": 470587.991}, {"Category": "Furniture", "Sales": 451508.6452}], "table_preview": [{"Category": "Office Supplies", "Sales": 643707.687}, {"Category": "Technology", "Sales": 470587.991}, {"Category": "Furniture", "Sales": 451508.6452}]}
{"id": "c67b35357c024671b0f8f2c62b618c83", "kind": "pie", "title": "Pie of Sales by Category", "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n(Feel free to use other obvious matches when present.)\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"give me pie plot for profit and region\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart.", "chat_id": "1756883857787", "x": "Category", "y": "Sales", "created_at": "2025-09-05T05:24:10.235017", "dataset_path": "E:\\SecureDocAI\\final_backend_ready\\final_backend\\uploaded_excels\\1756883857787\\SuperStore Sales DataSet.xlsx", "table": [{"Category": "Office Supplies", "Sales": 643707.687}, {"Category": "Technology", "Sales": 470587.991}, {"Category": "Furniture", "Sales": 451508.6452}], "table_preview": [{"Category": "Office Supplies", "Sales": 643707.687}, {"Category": "Technology", "Sales": 470587.991}, {"Category": "Furniture", "Sales": 451508.6452}]}
{"id": "72cc213f1def44bea910074b6596c957", "kind": "bar", "title": "Bar of Sales by Category", "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n(Feel free to use other obvious matches when present.)\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"give me bar plot for profit and region\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart.", "chat_id": "1756883857787", "x": "Category", "y": "Sales", "created_at": "2025-09-05T05:24:32.824770", "dataset_path": "E:\\SecureDocAI\\final_backend_ready\\final_backend\\uploaded_excels\\1756883857787\\SuperStore Sales DataSet.xlsx", "table": [{"Category": "Office Supplies", "Sales": 643707.687}, {"Category": "Technology", "Sales": 470587.991}, {"Category": "Furniture", "Sales": 451508.6452}], "table_preview": [{"Category": "Office Supplies", "Sales": 643707.687}, {"Category": "Technology", "Sales": 470587.991}, {"Category": "Furniture", "Sales": 451508.6452}]}
{"id": "328e100cd8654c3eaef1deee257f8c69", "kind": "bar", "title": "Bar of Sales by Category", "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n(Feel free to use other obvious matches when present.)\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"give me bar plot for profit and region\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart.\r\nIf the user mentions 'profit', you must use a profit-like column (not sales).", "chat_id": "1756883857787", "x": "Category", "y": "Sales", "created_at": "2025-09-05T05:43:45.446185", "dataset_path": "E:\\SecureDocAI\\final_backend_ready\\final_backend\\uploaded_excels\\1756883857787\\SuperStore Sales DataSet.xlsx", "table": [{"Category": "Office Supplies", "Sales": 643707.687}, {"Category": "Technology", "Sales": 470587.991}, {"Category": "Furniture", "Sales": 451508.6452}], "table_preview": [{"Category": "Office Supplies", "Sales": 643707.687}, {"Category": "Technology", "Sales": 470587.991}, {"Category": "Furniture", "Sales": 451508.6452}]}
{"id": "83bcbdf44199423f9a69c5f0535f014a", "kind": "bar", "title": "Bar of Sales by Category", "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n(Feel free to use other obvious matches when present.)\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"give me bar plot for profit and region\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart.\r\nIf the user mentions 'profit', you must use a profit-like column (not sales).", "chat_id": "1756883857787", "x": "Category", "y": "Sales", "created_at": "2025-09-05T05:54:50.783575", "dataset_path": "E:\\SecureDocAI\\final_backend_ready\\final_backend\\uploaded_excels\\1756883857787\\SuperStore Sales DataSet.xlsx", "table": [{"Category": "Office Supplies", "Sales": 643707.687}, {"Category": "Technology", "Sales": 470587.991}, {"Category": "Furniture", "Sales": 451508.6452}], "table_preview": [{"Category": "Office Supplies", "Sales": 643707.687}, {"Category": "Technology", "Sales": 470587.991}, {"Category": "Furniture", "Sales": 451508.6452}]}
{"id": "22df3bba4ee442c5a55884f10ced6b15", "kind": "bar", "title": "Bar of Sales by Category", "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n(Feel free to use other obvious matches when present.)\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"plot give me total sales\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart.\r\nIf the user mentions 'profit', you must use a profit-like column (not sales).", "chat_id": "1756883857787", "x": "Category", "y": "Sales", "created_at": "2025-09-05T05:55:15.936648", "dataset_path": "E:\\SecureDocAI\\final_backend_ready\\final_backend\\uploaded_excels\\1756883857787\\SuperStore Sales DataSet.xlsx", "table": [{"Category": "Office Supplies", "Sales": 643707.687}, {"Category": "Technology", "Sales": 470587.991}, {"Category": "Furniture", "Sales": 451508.6452}], "table_preview": [{"Category": "Office Supplies", "Sales": 643707.687}, {"Category": "Technology", "Sales": 470587.991}, {"Category": "Furniture", "Sales": 451508.6452}]}
{"id": "20cafdc1d245498e94df221190b1a1aa", "kind": "bar", "title": "Bar of Sales by Category", "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n(Feel free to use other obvious matches when present.)\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"give me total sales\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart.\r\nIf the user mentions 'profit', you must use a profit-like column (not sales).", "chat_id": "1756883857787", "x": "Category", "y": "Sales", "created_at": "2025-09-05T05:55:30.292831", "dataset_path": "E:\\SecureDocAI\\final_backend_ready\\final_backend\\uploaded_excels\\1756883857787\\SuperStore Sales DataSet.xlsx", "table": [{"Category": "Office Supplies", "Sales": 643707.687}, {"Category": "Technology", "Sales": 470587.991}, {"Category": "Furniture", "Sales": 451508.6452}], "table_preview": [{"Category": "Office Supplies", "Sales": 643707.687}, {"Category": "Technology", "Sales": 470587.991}, {"Category": "Furniture", "Sales": 451508.6452}]}
{"id": "10aa1f20832d4d92bfe92ce6c6644b47", "kind": "bar", "title": "Bar of Sales by Category", "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n(Feel free to use other obvious matches when present.)\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"plot give me total sales\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart.\r\nIf the user mentions 'profit', you must use a profit-like column (not sales).", "chat_id": "1756883857787", "x": "Category", "y": "Sales", "created_at": "2025-09-05T06:07:44.711856", "dataset_path": "E:\\SecureDocAI\\final_backend_ready\\final_backend\\uploaded_excels\\1756883857787\\SuperStore Sales DataSet.xlsx", "table": [{"Category": "Office Supplies", "Sales": 643707.687}, {"Category": "Technology", "Sales": 470587.991}, {"Category": "Furniture", "Sales": 451508.6452}], "table_preview": [{"Category": "Office Supplies", "Sales": 643707.687}, {"Category": "Technology", "Sales": 470587.991}, {"Category": "Furniture", "Sales": 451508.6452}], "message": "Sum of Sales by Category"}
{"id": "0310dd6b31dc4916909c5b24474ef734", "kind": "bar", "title": "Bar of Sales by Category", "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n(Feel free to use other obvious matches when present.)\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"give me bar plot for profit and region\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart.\r\nIf the user mentions 'profit', you must use a profit-like column (not sales).", "chat_id": "1756883857787", "x": "Category", "y": "Sales", "created_at": "2025-09-05T06:08:03.742175", "dataset_path": "E:\\SecureDocAI\\final_backend_ready\\final_backend\\uploaded_excels\\1756883857787\\SuperStore Sales DataSet.xlsx", "table": [{"Category": "Office Supplies", "Sales": 643707.687}, {"Category": "Technology", "Sales": 470587.991}, {"Category": "Furniture", "Sales": 451508.6452}], "table_preview": [{"Category": "Office Supplies", "Sales": 643707.687}, {"Category": "Technology", "Sales": 470587.991}, {"Category": "Furniture", "Sales": 451508.6452}], "message": "Sum of Sales by Category"}
{"id": "98a8afb85baf4f9b927230cc6ae0c520", "kind": "bar", "title": "Bar of Profit by Region", "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n(Feel free to use other obvious matches when present.)\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"give me bar plot for profit and region\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart.\r\nIf the user mentions 'profit', you must use a profit-like column (not sales).", "chat_id": "1756883857787", "x": "Region", "y": "Profit", "created_at": "2025-09-05T06:16:08.148595", "dataset_path": "E:\\SecureDocAI\\final_backend_ready\\final_backend\\uploaded_excels\\1756883857787\\SuperStore Sales DataSet.xlsx", "table": [{"Region": "West", "Profit": 67859.9582}, {"Region": "East", "Profit": 53400.4243}, {"Region": "Central", "Profit": 27450.0071}, {"Region": "South", "Profit": 26551.7163}], "table_preview": [{"Region": "West", "Profit": 67859.9582}, {"Region": "East", "Profit": 53400.4243}, {"Region": "Central", "Profit": 27450.0071}, {"Region": "South", "Profit": 26551.7163}]}
{"id": "2376466686db4da79cc385b3ff735727", "kind": "pie", "title": "Pie of Profit by Region", "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n(Feel free to use other obvious matches when present.)\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"give me pie plot for profit and region\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart.\r\nIf the user mentions 'profit', you must use a profit-like column (not sales).", "chat_id": "1756883857787", "x": "Region", "y": "Profit", "created_at": "2025-09-05T06:17:00.635513", "dataset_path": "E:\\SecureDocAI\\final_backend_ready\\final_backend\\uploaded_excels\\1756883857787\\SuperStore Sales DataSet.xlsx", "table": [{"Region": "West", "Profit": 67859.9582}, {"Region": "East", "Profit": 53400.4243}, {"Region": "Central", "Profit": 27450.0071}, {"Region": "South", "Profit": 26551.7163}], "table_preview": [{"Region": "West", "Profit": 67859.9582}, {"Region": "East", "Profit": 53400.4243}, {"Region": "Central", "Profit": 27450.0071}, {"Region": "South", "Profit": 26551.7163}]}
{"id": "12e8b3d7ee714ae8a39a7e2e245c449c", "kind": "line", "title": "Line of Profit by Payment Mode", "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n(Feel free to use other obvious matches when present.)\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"give me line plot for profit and payment mode\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart.\r\nIf the user mentions 'profit', you must use a profit-like column (not sales).", "chat_id": "1756883857787", "x": "Payment Mode", "y": "Profit", "created_at": "2025-09-05T06:17:27.566321", "dataset_path": "E:\\SecureDocAI\\final_backend_ready\\final_backend\\uploaded_excels\\1756883857787\\SuperStore Sales DataSet.xlsx", "table": [], "table_preview": []}
{"id": "8555c473b94843ff937d51b8078dcc64", "kind": "line", "title": "Line of Sales by Category", "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n(Feel free to use other obvious matches when present.)\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"give me line plot for profit and payment mode\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart.\r\nIf the user mentions 'profit', you must use a profit-like column (not sales).", "chat_id": "1756883857787", "x": "Category", "y": "Sales", "created_at": "2025-09-05T06:25:47.268249", "dataset_path": "E:\\SecureDocAI\\final_backend_ready\\final_backend\\uploaded_excels\\1756883857787\\SuperStore Sales DataSet.xlsx", "table": [{"Category": "Office Supplies", "Sales": 643707.687}, {"Category": "Technology", "Sales": 470587.991}, {"Category": "Furniture", "Sales": 451508.6452}], "table_preview": [{"Category": "Office Supplies", "Sales": 643707.687}, {"Category": "Technology", "Sales": 470587.991}, {"Category": "Furniture", "Sales": 451508.6452}]}
{"id": "2bebfd4a23eb4fddb66117d8e5b24cde", "kind": "line", "title": "Line of Sales by Category", "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n(Feel free to use other obvious matches when present.)\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"give me line plot for profit and payment mode\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart.\r\nIf the user mentions 'profit', you must use a profit-like column (not sales).", "chat_id": "1756883857787", "x": "Category", "y": "Sales", "created_at": "2025-09-05T06:36:56.854796", "dataset_path": "E:\\SecureDocAI\\final_backend_ready\\final_backend\\uploaded_excels\\1756883857787\\SuperStore Sales DataSet.xlsx", "table": [{"Category": "Office Supplies", "Sales": 643707.687}, {"Category": "Technology", "Sales": 470587.991}, {"Category": "Furniture", "Sales": 451508.6452}], "table_preview": [{"Category": "Office Supplies", "Sales": 643707.687}, {"Category": "Technology", "Sales": 470587.991}, {"Category": "Furniture", "Sales": 451508.6452}]}
{"id": "0dfdd155b892471eac608bcbe73eb4c6", "kind": "pie", "title": "Pie of Sales by Category", "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n(Feel free to use other obvious matches when present.)\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"give me pie plot for profit and region\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart.\r\nIf the user mentions 'profit', you must use a profit-like column (not sales).", "chat_id": "1756883857787", "x": "Category", "y": "Sales", "created_at": "2025-09-05T06:37:12.899081", "dataset_path": "E:\\SecureDocAI\\final_backend_ready\\final_backend\\uploaded_excels\\1756883857787\\SuperStore Sales DataSet.xlsx", "table": [{"Category": "Office Supplies", "Sales": 643707.687}, {"Category": "Technology", "Sales": 470587.991}, {"Category": "Furniture", "Sales": 451508.6452}], "table_preview": [{"Category": "Office Supplies", "Sales": 643707.687}, {"Category": "Technology", "Sales": 470587.991}, {"Category": "Furniture", "Sales": 451508.6452}]}
{"id": "73fef9c029dc4ce9912b151a92c231b6", "kind": "pie", "title": "Pie of Profit by Region", "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n(Feel free to use other obvious matches when present.)\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"give me pie plot for profit and region\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart.\r\nIf the user mentions 'profit', you must use a profit-like column (not sales).", "chat_id": "1756883857787", "x": "Region", "y": "Profit", "created_at": "2025-09-05T06:38:39.233614", "dataset_path": "E:\\SecureDocAI\\final_backend_ready\\final_backend\\uploaded_excels\\1756883857787\\SuperStore Sales DataSet.xlsx", "table": [{"Region": "West", "Profit": 67859.9582}, {"Region": "East", "Profit": 53400.4243}, {"Region": "Central", "Profit": 27450.0071}, {"Region": "South", "Profit": 26551.7163}], "table_preview": [{"Region": "West", "Profit": 67859.9582}, {"Region": "East", "Profit": 53400.4243}, {"Region": "Central", "Profit": 27450.0071}, {"Region": "South", "Profit": 26551.7163}]}
{"id": "ae29228f7c964933847fecdbbb75b1ca", "kind": "line", "title": "Line of Profit by Region", "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n(Feel free to use other obvious matches when present.)\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"give me line plot for profit and region\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart.\r\nIf the user mentions 'profit', you must use a profit-like column (not sales).", "chat_id": "1756883857787", "x": "Region", "y": "Profit", "created_at": "2025-09-05T06:39:59.787624", "dataset_path": "E:\\SecureDocAI\\final_backend_ready\\final_backend\\uploaded_excels\\1756883857787\\SuperStore Sales DataSet.xlsx", "table": [], "table_preview": []}
{"id": "0a49d115383d4380a62d2e380f007b52", "kind": "line", "title": "Line of Profit by Region", "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n(Feel free to use other obvious matches when present.)\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"give me line plot for profit and region\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart.\r\nIf the user mentions 'profit', you must use a profit-like column (not sales).", "chat_id": "1756883857787", "x": "Region", "y": "Profit", "created_at": "2025-09-05T06:48:11.457884", "dataset_path": "E:\\SecureDocAI\\final_backend_ready\\final_backend\\uploaded_excels\\1756883857787\\SuperStore Sales DataSet.xlsx", "table": [], "table_preview": []}
{"id": "ea63a64c576a4557aef44530d6ad946f", "kind": "line", "title": "Line of Profit by Region", "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n(Feel free to use other obvious matches when present.)\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"give me line plot for profit and region\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart.\r\nIf the user mentions 'profit', you must use a profit-like column (not sales).", "chat_id": "1756883857787", "x": "Region", "y": "Profit", "created_at": "2025-09-05T07:02:17.738919", "dataset_path": "E:\\SecureDocAI\\final_backend_ready\\final_backend\\uploaded_excels\\1756883857787\\SuperStore Sales DataSet.xlsx", "table": [], "table_preview": []}
{"id": "a5cd8762b9ff456a9179ab86944fb94a", "kind": "pie", "title": "Pie of Profit by Region", "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n(Feel free to use other obvious matches when present.)\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"give me pie plot for profit and region\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart.\r\nIf the user mentions 'profit', you must use a profit-like column (not sales).", "chat_id": "1756883857787", "x": "Region", "y": "Profit", "created_at": "2025-09-05T07:02:39.160614", "dataset_path": "E:\\SecureDocAI\\final_backend_ready\\final_backend\\uploaded_excels\\1756883857787\\SuperStore Sales DataSet.xlsx", "table": [{"Region": "West", "Profit": 67859.9582}, {"Region": "East", "Profit": 53400.4243}, {"Region": "Central", "Profit": 27450.0071}, {"Region": "South", "Profit": 26551.7163}], "table_preview": [{"Region": "West", "Profit": 67859.9582}, {"Region": "East", "Profit": 53400.4243}, {"Region": "Central", "Profit": 27450.0071}, {"Region": "South", "Profit": 26551.7163}], "table_csv_url": "/api/visualizations/a5cd8762b9ff456a9179ab86944fb94a/table"}
{"id": "f98174c63611481aa05c3f640e36c830", "kind": "box", "title": "Box of Profit by Region", "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n(Feel free to use other obvious matches when present.)\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"give me box plot for profit and region\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart.\r\nIf the user mentions 'profit', you must use a profit-like column (not sales).", "chat_id": "1756883857787", "x": "Region", "y": "Profit", "created_at": "2025-09-05T07:02:52.516390", "dataset_path": "E:\\SecureDocAI\\final_backend_ready\\final_backend\\uploaded_excels\\1756883857787\\SuperStore Sales DataSet.xlsx", "table": [{"Region": "Central", "count": 1381, "median": 5.397, "q1": -4.1136, "q3": 23.1192}, {"Region": "East", "count": 1688, "median": 8.2121, "q1": 1.6665, "q3": 28.0469}, {"Region": "South", "count": 931, "median": 8.3524, "q1": 1.6864, "q3": 32.4513}, {"Region": "West", "count": 1901, "median": 10.7325, "q1": 3.894, "q3": 30.9918}], "table_preview": [{"Region": "Central", "count": 1381, "median": 5.397, "q1": -4.1136, "q3": 23.1192}, {"Region": "East", "count": 1688, "median": 8.2121, "q1": 1.6665, "q3": 28.0469}, {"Region": "South", "count": 931, "median": 8.3524, "q1": 1.6864, "q3": 32.4513}, {"Region": "West", "count": 1901, "median": 10.7325, "q1": 3.894, "q3": 30.9918}], "table_csv_url": "/api/visualizations/f98174c63611481aa05c3f640e36c830/table"}
{"id": "acdafacd412144d38c368aa79b9aa78a", "kind": "scatter", "title": "Scatter of Profit by Sales", "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n(Feel free to use other obvious matches when present.)\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"give me scatter plot for profit and region\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart.\r\nIf the user mentions 'profit', you must use a profit-like column (not sales).", "chat_id": "1756883857787", "x": "Sales", "y": "Profit", "created_at": "2025-09-05T07:03:09.324586", "dataset_path": "E:\\SecureDocAI\\final_backend_ready\\final_backend\\uploaded_excels\\1756883857787\\SuperStore Sales DataSet.xlsx", "table": [{"points": 5000, "correlation": 0.30910727129558613}], "table_preview": [{"points": 5000, "correlation": 0.30910727129558613}], "table_csv_url": "/api/visualizations/acdafacd412144d38c368aa79b9aa78a/table"}
{"id": "4a967aed60ca425f93d87e001532e43d", "kind": "hist", "title": "Hist of Profit by Region", "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n(Feel free to use other obvious matches when present.)\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"give me hist plot for profit and region\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart.\r\nIf the user mentions 'profit', you must use a profit-like column (not sales).", "chat_id": "1756883857787", "x": "Region", "y": "Profit", "created_at": "2025-09-05T07:03:29.288144", "dataset_path": "E:\\SecureDocAI\\final_backend_ready\\final_backend\\uploaded_excels\\1756883857787\\SuperStore Sales DataSet.xlsx", "table": [{"bin_start": -6599.978, "bin_end": -6299.97892, "count": 1}, {"bin_start": -6299.97892, "bin_end": -5999.97984, "count": 0}, {"bin_start": -5999.97984, "bin_end": -5699.98076, "count": 0}, {"bin_start": -5699.98076, "bin_end": -5399.98168, "count": 0}, {"bin_start": -5399.98168, "bin_end": -5099.982599999999, "count": 0}, {"bin_start": -5099.982599999999, "bin_end": -4799.98352, "count": 0}, {"bin_start": -4799.98352, "bin_end": -4499.98444, "count": 0}, {"bin_start": -4499.98444, "bin_end": -4199.98536, "count": 0}, {"bin_start": -4199.98536, "bin_end": -3899.9862799999996, "count": 0}, {"bin_start": -3899.9862799999996, "bin_end": -3599.9871999999996, "count": 1}, {"bin_start": -3599.9871999999996, "bin_end": -3299.9881199999995, "count": 1}, {"bin_start": -3299.9881199999995, "bin_end": -2999.9890399999995, "count": 0}, {"bin_start": -2999.9890399999995, "bin_end": -2699.9899599999994, "count": 1}, {"bin_start": -2699.9899599999994, "bin_end": -2399.9908799999994, "count": 0}, {"bin_start": -2399.9908799999994, "bin_end": -2099.991799999999, "count": 1}, {"bin_start": -2099.991799999999, "bin_end": -1799.9927199999993, "count": 1}, {"bin_start": -1799.9927199999993, "bin_end": -1499.9936399999997, "count": 0}, {"bin_start": -1499.9936399999997, "bin_end": -1199.9945599999992, "count": 2}, {"bin_start": -1199.9945599999992, "bin_end": -899.9954799999987, "count": 8}, {"bin_start": -899.9954799999987, "bin_end": -599.9963999999991, "count": 9}, {"bin_start": -599.9963999999991, "bin_end": -299.9973199999995, "count": 34}, {"bin_start": -299.9973199999995, "bin_end": 0.0017600000010133954, "count": 1078}, {"bin_start": 0.0017600000010133954, "bin_end": 300.0008400000015, "count": 4610}, {"bin_start": 300.0008400000015, "bin_end": 599.9999200000011, "count": 95}, {"bin_start": 599.9999200000011, "bin_end": 899.9990000000007, "count": 32}, {"bin_start": 899.9990000000007, "bin_end": 1199.9980800000012, "count": 7}, {"bin_start": 1199.9980800000012, "bin_end": 1499.9971600000017, "count": 7}, {"bin_start": 1499.9971600000017, "bin_end": 1799.9962400000013, "count": 2}, {"bin_start": 1799.9962400000013, "bin_end": 2099.995320000001, "count": 1}, {"bin_start": 2099.995320000001, "bin_end": 2399.9944000000023, "count": 1}, {"bin_start": 2399.9944000000023, "bin_end": 2699.993480000002, "count": 3}, {"bin_start": 2699.993480000002, "bin_end": 2999.9925600000015, "count": 1}, {"bin_start": 2999.9925600000015, "bin_end": 3299.991640000001, "count": 0}, {"bin_start": 3299.991640000001, "bin_end": 3599.9907200000007, "count": 0}, {"bin_start": 3599.9907200000007, "bin_end": 3899.989800000002, "count": 0}, {"bin_start": 3899.989800000002, "bin_end": 4199.988880000002, "count": 1}, {"bin_start": 4199.988880000002, "bin_end": 4499.987960000001, "count": 0}, {"bin_start": 4499.987960000001, "bin_end": 4799.987040000003, "count": 0}, {"bin_start": 4799.987040000003, "bin_end": 5099.986120000002, "count": 2}, {"bin_start": 5099.986120000002, "bin_end": 5399.985200000002, "count": 0}, {"bin_start": 5399.985200000002, "bin_end": 5699.9842800000015, "count": 0}, {"bin_start": 5699.9842800000015, "bin_end": 5999.983360000001, "count": 0}, {"bin_start": 5999.983360000001, "bin_end": 6299.9824400000025, "count": 0}, {"bin_start": 6299.9824400000025, "bin_end": 6599.981520000002, "count": 0}, {"bin_start": 6599.981520000002, "bin_end": 6899.980600000002, "count": 1}, {"bin_start": 6899.980600000002, "bin_end": 7199.979680000003, "count": 0}, {"bin_start": 7199.979680000003, "bin_end": 7499.978760000003, "count": 0}, {"bin_start": 7499.978760000003, "bin_end": 7799.977840000002, "count": 0}, {"bin_start": 7799.977840000002, "bin_end": 8099.976920000002, "count": 0}, {"bin_start": 8099.976920000002, "bin_end": 8399.976, "count": 1}], "table_preview": [{"bin_start": -6599.978, "bin_end": -6299.97892, "count": 1}, {"bin_start": -6299.97892, "bin_end": -5999.97984, "count": 0}, {"bin_start": -5999.97984, "bin_end": -5699.98076, "count": 0}, {"bin_start": -5699.98076, "bin_end": -5399.98168, "count": 0}, {"bin_start": -5399.98168, "bin_end": -5099.982599999999, "count": 0}, {"bin_start": -5099.982599999999, "bin_end": -4799.98352, "count": 0}, {"bin_start": -4799.98352, "bin_end": -4499.98444, "count": 0}, {"bin_start": -4499.98444, "bin_end": -4199.98536, "count": 0}, {"bin_start": -4199.98536, "bin_end": -3899.9862799999996, "count": 0}, {"bin_start": -3899.9862799999996, "bin_end": -3599.9871999999996, "count": 1}], "table_csv_url": "/api/visualizations/4a967aed60ca425f93d87e001532e43d/table"}
{"id": "36fc86cca82f46afab34b39d74e7de93", "kind": "pie", "title": "Pie of Sales by Payment Mode", "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n(Feel free to use other obvious matches when present.)\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"give me pie plot for sales and payment mode\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart.\r\nIf the user mentions 'profit', you must use a profit-like column (not sales).", "chat_id": "1756883857787", "x": "Payment Mode", "y": "Sales", "created_at": "2025-09-05T07:04:50.523281", "dataset_path": "E:\\SecureDocAI\\final_backend_ready\\final_backend\\uploaded_excels\\1756883857787\\SuperStore Sales DataSet.xlsx", "table": [{"Payment Mode": "COD", "Sales": 667417.7513}, {"Payment Mode": "Online", "Sales": 553993.4607}, {"Payment Mode": "Cards", "Sales": 344393.1112}], "table_preview": [{"Payment Mode": "COD", "Sales": 667417.7513}, {"Payment Mode": "Online", "Sales": 553993.4607}, {"Payment Mode": "Cards", "Sales": 344393.1112}], "table_csv_url": "/api/visualizations/36fc86cca82f46afab34b39d74e7de93/table"}
{"id": "c119b29038dd49cda0eb2abc81902e3d", "kind": "line", "title": "Line of Sales by Payment Mode", "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n(Feel free to use other obvious matches when present.)\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"give me line plot for sales and payment mode\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart.\r\nIf the user mentions 'profit', you must use a profit-like column (not sales).", "chat_id": "1756883857787", "x": "Payment Mode", "y": "Sales", "created_at": "2025-09-05T07:05:47.337343", "dataset_path": "E:\\SecureDocAI\\final_backend_ready\\final_backend\\uploaded_excels\\1756883857787\\SuperStore Sales DataSet.xlsx", "table": [], "table_preview": []}
{"id": "4b74a5ebdb2049359917800f0f0684d8", "kind": "box", "title": "Box of Sales by Payment Mode", "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n(Feel free to use other obvious matches when present.)\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"give me box plot for sales and payment mode\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart.\r\nIf the user mentions 'profit', you must use a profit-like column (not sales).", "chat_id": "1756883857787", "x": "Payment Mode", "y": "Sales", "created_at": "2025-09-05T07:06:06.899566", "dataset_path": "E:\\SecureDocAI\\final_backend_ready\\final_backend\\uploaded_excels\\1756883857787\\SuperStore Sales DataSet.xlsx", "table": [{"Payment Mode": "COD", "count": 2453, "median": 131.992, "q1": 81.98, "q3": 260.16}, {"Payment Mode": "Cards", "count": 1284, "median": 125.25999999999999, "q1": 72.2205, "q3": 256.71}, {"Payment Mode": "Online", "count": 2164, "median": 126.789, "q1": 61.348, "q3": 273.79}], "table_preview": [{"Payment Mode": "COD", "count": 2453, "median": 131.992, "q1": 81.98, "q3": 260.16}, {"Payment Mode": "Cards", "count": 1284, "median": 125.25999999999999, "q1": 72.2205, "q3": 256.71}, {"Payment Mode": "Online", "count": 2164, "median": 126.789, "q1": 61.348, "q3": 273.79}], "table_csv_url": "/api/visualizations/4b74a5ebdb2049359917800f0f0684d8/table"}
{"id": "cc09780768564644902ffd0ce6974908", "kind": "scatter", "title": "Scatter of Profit by Sales", "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n(Feel free to use other obvious matches when present.)\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"give me scatter plot for sales and payment mode\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart.\r\nIf the user mentions 'profit', you must use a profit-like column (not sales).", "chat_id": "1756883857787", "x": "Sales", "y": "Profit", "created_at": "2025-09-05T07:06:25.246626", "dataset_path": "E:\\SecureDocAI\\final_backend_ready\\final_backend\\uploaded_excels\\1756883857787\\SuperStore Sales DataSet.xlsx", "table": [{"points": 5000, "correlation": 0.30910727129558613}], "table_preview": [{"points": 5000, "correlation": 0.30910727129558613}], "table_csv_url": "/api/visualizations/cc09780768564644902ffd0ce6974908/table"}
{"id": "a023d030f3cc48d492375ab5f3a62700", "kind": "bar", "title": "Bar of Sales by Payment Mode", "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n(Feel free to use other obvious matches when present.)\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"give me bar plot for sales and payment mode\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart.\r\nIf the user mentions 'profit', you must use a profit-like column (not sales).", "chat_id": "1756883857787", "x": "Payment Mode", "y": "Sales", "created_at": "2025-09-05T07:07:47.937808", "dataset_path": "E:\\SecureDocAI\\final_backend_ready\\final_backend\\uploaded_excels\\1756883857787\\SuperStore Sales DataSet.xlsx", "table": [{"Payment Mode": "COD", "Sales": 667417.7513}, {"Payment Mode": "Online", "Sales": 553993.4607}, {"Payment Mode": "Cards", "Sales": 344393.1112}], "table_preview": [{"Payment Mode": "COD", "Sales": 667417.7513}, {"Payment Mode": "Online", "Sales": 553993.4607}, {"Payment Mode": "Cards", "Sales": 344393.1112}], "table_csv_url": "/api/visualizations/a023d030f3cc48d492375ab5f3a62700/table"}
{"id": "a0bb1670ab38465084919e39ddd5e4ca", "kind": "hist", "title": "Hist of Sales by Payment Mode", "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n(Feel free to use other obvious matches when present.)\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"give me hist plot for sales and payment mode\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart.\r\nIf the user mentions 'profit', you must use a profit-like column (not sales).", "chat_id": "1756883857787", "x": "Payment Mode", "y": "Sales", "created_at": "2025-09-05T07:11:45.486403", "dataset_path": "E:\\SecureDocAI\\final_backend_ready\\final_backend\\uploaded_excels\\1756883857787\\SuperStore Sales DataSet.xlsx", "table": [{"bin_start": 0.836, "bin_end": 182.81788000000003, "count": 3990}, {"bin_start": 182.81788000000003, "bin_end": 364.79976000000005, "count": 837}, {"bin_start": 364.79976000000005, "bin_end": 546.78164, "count": 434}, {"bin_start": 546.78164, "bin_end": 728.7635200000001, "count": 195}, {"bin_start": 728.7635200000001, "bin_end": 910.7454000000001, "count": 115}, {"bin_start": 910.7454000000001, "bin_end": 1092.72728, "count": 89}, {"bin_start": 1092.72728, "bin_end": 1274.70916, "count": 46}, {"bin_start": 1274.70916, "bin_end": 1456.6910400000002, "count": 45}, {"bin_start": 1456.6910400000002, "bin_end": 1638.6729200000002, "count": 32}, {"bin_start": 1638.6729200000002, "bin_end": 1820.6548000000003, "count": 20}, {"bin_start": 1820.6548000000003, "bin_end": 2002.6366800000003, "count": 16}, {"bin_start": 2002.6366800000003, "bin_end": 2184.61856, "count": 11}, {"bin_start": 2184.61856, "bin_end": 2366.60044, "count": 9}, {"bin_start": 2366.60044, "bin_end": 2548.58232, "count": 12}, {"bin_start": 2548.58232, "bin_end": 2730.5642000000003, "count": 5}, {"bin_start": 2730.5642000000003, "bin_end": 2912.54608, "count": 7}, {"bin_start": 2912.54608, "bin_end": 3094.52796, "count": 7}, {"bin_start": 3094.52796, "bin_end": 3276.50984, "count": 2}, {"bin_start": 3276.50984, "bin_end": 3458.49172, "count": 6}, {"bin_start": 3458.49172, "bin_end": 3640.4736000000003, "count": 1}, {"bin_start": 3640.4736000000003, "bin_end": 3822.45548, "count": 0}, {"bin_start": 3822.45548, "bin_end": 4004.4373600000004, "count": 2}, {"bin_start": 4004.4373600000004, "bin_end": 4186.419240000001, "count": 1}, {"bin_start": 4186.419240000001, "bin_end": 4368.40112, "count": 3}, {"bin_start": 4368.40112, "bin_end": 4550.383000000001, "count": 5}, {"bin_start": 4550.383000000001, "bin_end": 4732.364880000001, "count": 1}, {"bin_start": 4732.364880000001, "bin_end": 4914.34676, "count": 4}, {"bin_start": 4914.34676, "bin_end": 5096.328640000001, "count": 0}, {"bin_start": 5096.328640000001, "bin_end": 5278.310520000001, "count": 2}, {"bin_start": 5278.310520000001, "bin_end": 5460.292400000001, "count": 2}, {"bin_start": 5460.292400000001, "bin_end": 5642.2742800000005, "count": 1}, {"bin_start": 5642.2742800000005, "bin_end": 5824.256160000001, "count": 0}, {"bin_start": 5824.256160000001, "bin_end": 6006.238040000001, "count": 0}, {"bin_start": 6006.238040000001, "bin_end": 6188.2199200000005, "count": 0}, {"bin_start": 6188.2199200000005, "bin_end": 6370.201800000001, "count": 0}, {"bin_start": 6370.201800000001, "bin_end": 6552.183680000001, "count": 0}, {"bin_start": 6552.183680000001, "bin_end": 6734.165560000001, "count": 0}, {"bin_start": 6734.165560000001, "bin_end": 6916.147440000001, "count": 0}, {"bin_start": 6916.147440000001, "bin_end": 7098.129320000001, "count": 0}, {"bin_start": 7098.129320000001, "bin_end": 7280.111200000001, "count": 0}, {"bin_start": 7280.111200000001, "bin_end": 7462.093080000001, "count": 0}, {"bin_start": 7462.093080000001, "bin_end": 7644.074960000001, "count": 0}, {"bin_start": 7644.074960000001, "bin_end": 7826.056840000001, "count": 0}, {"bin_start": 7826.056840000001, "bin_end": 8008.038720000001, "count": 0}, {"bin_start": 8008.038720000001, "bin_end": 8190.020600000001, "count": 0}, {"bin_start": 8190.020600000001, "bin_end": 8372.002480000001, "count": 0}, {"bin_start": 8372.002480000001, "bin_end": 8553.98436, "count": 0}, {"bin_start": 8553.98436, "bin_end": 8735.96624, "count": 0}, {"bin_start": 8735.96624, "bin_end": 8917.948120000001, "count": 0}, {"bin_start": 8917.948120000001, "bin_end": 9099.93, "count": 1}], "table_preview": [{"bin_start": 0.836, "bin_end": 182.81788000000003, "count": 3990}, {"bin_start": 182.81788000000003, "bin_end": 364.79976000000005, "count": 837}, {"bin_start": 364.79976000000005, "bin_end": 546.78164, "count": 434}, {"bin_start": 546.78164, "bin_end": 728.7635200000001, "count": 195}, {"bin_start": 728.7635200000001, "bin_end": 910.7454000000001, "count": 115}, {"bin_start": 910.7454000000001, "bin_end": 1092.72728, "count": 89}, {"bin_start": 1092.72728, "bin_end": 1274.70916, "count": 46}, {"bin_start": 1274.70916, "bin_end": 1456.6910400000002, "count": 45}, {"bin_start": 1456.6910400000002, "bin_end": 1638.6729200000002, "count": 32}, {"bin_start": 1638.6729200000002, "bin_end": 1820.6548000000003, "count": 20}], "table_csv_url": "/api/visualizations/a0bb1670ab38465084919e39ddd5e4ca/table"}
{"id": "e9c7cba482c34177928d30a379de2d98", "kind": "scatter", "title": "Scatter of Profit by Sales", "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n(Feel free to use other obvious matches when present.)\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"give me scatter plot for sales and payment mode\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart.\r\nIf the user mentions 'profit', you must use a profit-like column (not sales).", "chat_id": "1756883857787", "x": "Sales", "y": "Profit", "created_at": "2025-09-05T07:23:08.551721", "dataset_path": "E:\\SecureDocAI\\final_backend_ready\\final_backend\\uploaded_excels\\1756883857787\\SuperStore Sales DataSet.xlsx", "table": [{"__summary__": "correlation", "value": 0.30910727129558613}, {"Sales": 2049.1, "Profit": 10.179}, {"Sales": 128.368, "Profit": 0.8288}, {"Sales": 143.472, "Profit": 14.5152}, {"Sales": 102.768, "Profit": 0.4768}, {"Sales": 97.419, "Profit": -3.0933}, {"Sales": 479.72, "Profit": 52.7692}, {"Sales": 9.552, "Profit": -3.8208}, {"Sales": 276.55, "Profit": 114.9385}, {"Sales": 84.94, "Profit": 4.1124}, {"Sales": 94.656, "Profit": 1.5691}, {"Sales": 87.84, "Profit": 23.7168}, {"Sales": 910.982, "Profit": 74.9985}, {"Sales": 936.7, "Profit": 9.936}, {"Sales": 396.104, "Profit": 5.7312}, {"Sales": 373.44, "Profit": 8.4888}, {"Sales": 109.3, "Profit": 28.217}, {"Sales": 69.52, "Profit": 17.38}, {"Sales": 364.3992, "Profit": -91.7586}, {"Sales": 287.98, "Profit": 74.8142}, {"Sales": 118.762, "Profit": -24.7716}, {"Sales": 43.6, "Profit": 12.208}, {"Sales": 15.24, "Profit": 5.334}, {"Sales": 124.95, "Profit": 22.087}, {"Sales": 267.96, "Profit": 6.2208}, {"Sales": 72.224, "Profit": 25.2784}, {"Sales": 133.57, "Profit": 11.7741}, {"Sales": 64.384, "Profit": -160.96}, {"Sales": 431.872, "Profit": 63.7536}, {"Sales": 350.666, "Profit": -14.4784}, {"Sales": 298.776, "Profit": 7.4694}, {"Sales": 456.704, "Profit": -38.2116}, {"Sales": 88.552, "Profit": 5.4432}, {"Sales": 579.3, "Profit": 28.965}, {"Sales": 521.96, "Profit": 125.99}, {"Sales": 105.552, "Profit": 35.6238}, {"Sales": 208.16, "Profit": 56.2032}, {"Sales": 1104.55, "Profit": 694.5015}, {"Sales": 850.99, "Profit": 7.3451}, {"Sales": 191.82, "Profit": 61.3824}, {"Sales": 138.128, "Profit": 3.6714}, {"Sales": 362.94, "Profit": 9.9882}, {"Sales": 12.588, "Profit": -20.1408}, {"Sales": 564.195, "Profit": -304.6653}, {"Sales": 90.882, "Profit": -190.8522}, {"Sales": 349.95, "Profit": 118.983}, {"Sales": 159.984, "Profit": 13.9986}, {"Sales": 39.98, "Profit": 1.999}, {"Sales": 944.93, "Profit": 236.2325}, {"Sales": 108.798, "Profit": -2.6586}, {"Sales": 249.92, "Profit": 109.7208}, {"Sales": 106.16, "Profit": 3.58}, {"Sales": 301.576, "Profit": 19.3932}, {"Sales": 155.0, "Profit": 20.21}, {"Sales": 132.45, "Profit": 4.536}, {"Sales": 137.94, "Profit": 35.8644}, {"Sales": 159.384, "Profit": 15.5344}, {"Sales": 144.96, "Profit": 27.882}, {"Sales": 39.76, "Profit": 12.3256}, {"Sales": 284.08, "Profit": 24.857}, {"Sales": 11.992, "Profit": 0.8994}, {"Sales": 3.984, "Profit": 1.2948}, {"Sales": 29.34, "Profit": 13.4964}, {"Sales": 171.04, "Profit": 44.4704}, {"Sales": 1263.3, "Profit": 315.825}, {"Sales": 401.94, "Profit": 90.735}, {"Sales": 35.44, "Profit": 16.6568}, {"Sales": 18.48, "Profit": 6.006}, {"Sales": 155.76, "Profit": 11.1176}, {"Sales": 182.72, "Profit": 84.0512}, {"Sales": 10.584, "Profit": 3.4398}, {"Sales": 4.338, "Profit": -3.0366}, {"Sales": 323.2, "Profit": 18.09}, {"Sales": 10.95, "Profit": 3.285}, {"Sales": 377.376, "Profit": 27.1032}, {"Sales": 302.744, "Profit": 2.3808}, {"Sales": 15.808, "Profit": 5.3352}, {"Sales": 552.272, "Profit": -97.176}, {"Sales": 301.5, "Profit": 15.525}, {"Sales": 2.946, "Profit": -2.0622}, {"Sales": 45.68, "Profit": 21.0128}, {"Sales": 109.592, "Profit": 8.2194}, {"Sales": 517.9, "Profit": 134.654}, {"Sales": 122.96, "Profit": 10.7604}, {"Sales": 32.54, "Profit": 15.9446}, {"Sales": 887.271, "Profit": -63.3765}, {"Sales": 112.0, "Profit": 12.96}, {"Sales": 517.24, "Profit": 9.5448}, {"Sales": 109.952, "Profit": 0.372}, {"Sales": 1130.42, "Profit": 282.2092}, {"Sales": 114.112, "Profit": 17.6016}, {"Sales": 144.541, "Profit": -52.5481}, {"Sales": 65.88, "Profit": 18.4464}, {"Sales": 102.048, "Profit": 1.0287}, {"Sales": 8.712, "Profit": -19.602}, {"Sales": 431.94, "Profit": -71.99}, {"Sales": 110.32, "Profit": 2.6068}, {"Sales": 845.488, "Profit": -12.0784}, {"Sales": 291.48, "Profit": 116.3904}, {"Sales": 12.76, "Profit": 5.8696}, {"Sales": 100.24, "Profit": 33.831}, {"Sales": 301.96, "Profit": 33.2156}, {"Sales": 2579.985, "Profit": -3399.98}, {"Sales": 25.06, "Profit": 11.7782}, {"Sales": 790.98, "Profit": -1141.47}, {"Sales": 6.672, "Profit": 1.668}, {"Sales": 141.82, "Profit": 6.9654}, {"Sales": 102.1, "Profit": 6.93}, {"Sales": 114.368, "Profit": 0.3822}, {"Sales": 96.552, "Profit": 5.6376}, {"Sales": 39.98, "Profit": 9.995}, {"Sales": 96.76, "Profit": 4.2048}, {"Sales": 48.58, "Profit": 7.7728}, {"Sales": 248.44, "Profit": 62.532}, {"Sales": 1382.52, "Profit": 84.22}, {"Sales": 132.956, "Profit": -3.7996}, {"Sales": 156.98, "Profit": 10.7964}, {"Sales": 129.16, "Profit": 10.5672}, {"Sales": 110.776, "Profit": -53.7432}, {"Sales": 12.544, "Profit": -9.0944}, {"Sales": 147.96, "Profit": 18.7812}, {"Sales": 11.21, "Profit": 3.363}, {"Sales": 130.4, "Profit": 15.552}, {"Sales": 145.02, "Profit": 33.3256}, {"Sales": 77.52, "Profit": 37.9848}, {"Sales": 73.2, "Profit": 21.228}, {"Sales": 62.94, "Profit": 30.2112}, {"Sales": 165.6, "Profit": 10.35}, {"Sales": 149.95, "Profit": 41.986}, {"Sales": 1433.93, "Profit": 601.9699}, {"Sales": 113.44, "Profit": 16.848}, {"Sales": 315.0, "Profit": 27.69}, {"Sales": 298.93, "Profit": 140.5957}, {"Sales": 102.336, "Profit": -12.792}, {"Sales": 170.786, "Profit": 0.0}, {"Sales": 125.52, "Profit": 46.5432}, {"Sales": 5.04, "Profit": 0.1512}, {"Sales": 205.44, "Profit": 52.632}, {"Sales": 11.07, "Profit": 5.2029}, {"Sales": 98.248, "Profit": 0.5904}, {"Sales": 184.75, "Profit": 77.625}, {"Sales": 1444.98, "Profit": 629.991}, {"Sales": 728.946, "Profit": -157.9383}, {"Sales": 132.17, "Profit": -46.536}, {"Sales": 159.93, "Profit": 12.993}, {"Sales": 78.552, "Profit": 1.5522}, {"Sales": 308.792, "Profit": 35.099}, {"Sales": 389.17, "Profit": 1.0842}, {"Sales": 145.9, "Profit": 9.072}, {"Sales": 221.96, "Profit": 19.596}, {"Sales": 41.85, "Profit": 10.881}, {"Sales": 417.784, "Profit": -5.0098}, {"Sales": 403.9, "Profit": 17.745}, {"Sales": 89.928, "Profit": 0.6696}, {"Sales": 185.376, "Profit": -34.758}, {"Sales": 167.07, "Profit": 25.2315}, {"Sales": 347.802, "Profit": -24.843}, {"Sales": 119.76, "Profit": 3.1752}, {"Sales": 136.064, "Profit": 1.3716}, {"Sales": 109.8, "Profit": 46.116}, {"Sales": 52.56, "Profit": 18.396}, {"Sales": 60.72, "Profit": 26.1096}, {"Sales": 39.72, "Profit": 4.4685}, {"Sales": 924.92, "Profit": 421.0824}, {"Sales": 257.499, "Profit": 24.2352}, {"Sales": 80.98, "Profit": 1.6196}, {"Sales": 140.744, "Profit": 0.8058}, {"Sales": 291.54, "Profit": 2.1582}, {"Sales": 563.4, "Profit": 67.608}, {"Sales": 108.552, "Profit": 5.6376}, {"Sales": 935.97, "Profit": 411.7365}, {"Sales": 165.86, "Profit": 27.93}, {"Sales": 124.21, "Profit": -45.3492}, {"Sales": 87.313, "Profit": -1.9275}, {"Sales": 130.04, "Profit": 15.5288}, {"Sales": 3.528, "Profit": 1.1466}, {"Sales": 299.92, "Profit": -25.992}, {"Sales": 137.13, "Profit": 36.2877}, {"Sales": 137.768, "Profit": 31.0688}, {"Sales": 155.56, "Profit": 18.8328}, {"Sales": 196.352, "Profit": -32.9292}, {"Sales": 1295.64, "Profit": 349.3392}, {"Sales": 216.752, "Profit": 60.4632}, {"Sales": 136.464, "Profit": 22.9008}, {"Sales": 117.968, "Profit": 2.6892}, {"Sales": 141.92, "Profit": 8.0968}, {"Sales": 374.38, "Profit": 93.6988}, {"Sales": 118.84, "Profit": 34.742}, {"Sales": 329.314, "Profit": -39.5118}, {"Sales": 142.544, "Profit": 6.42}, {"Sales": 10.56, "Profit": 5.0688}, {"Sales": 24.9, "Profit": 11.454}, {"Sales": 143.92, "Profit": 53.8608}, {"Sales": 296.37, "Profit": 80.0199}, {"Sales": 151.62, "Profit": 6.8714}, {"Sales": 116.28, "Profit": 7.4872}, {"Sales": 122.34, "Profit": 9.3564}, {"Sales": 11.232, "Profit": -8.2368}, {"Sales": 874.544, "Profit": -21.2136}, {"Sales": 17.46, "Profit": 8.2062}, {"Sales": 115.56, "Profit": 1.4456}, {"Sales": 214.744, "Profit": -14.196}, {"Sales": 155.82, "Profit": 42.0714}, {"Sales": 129.75, "Profit": 15.6375}, {"Sales": 192.376, "Profit": -34.3148}, {"Sales": 1652.94, "Profit": 314.0586}, {"Sales": 179.16, "Profit": 59.8176}, {"Sales": 31.96, "Profit": 1.598}, {"Sales": 109.52, "Profit": 42.0744}, {"Sales": 631.782, "Profit": 140.396}, {"Sales": 18.69, "Profit": 5.2332}, {"Sales": 104.18, "Profit": 7.254}, {"Sales": 251.79, "Profit": 118.3413}, {"Sales": 10.56, "Profit": 4.6464}, {"Sales": 468.552, "Profit": 51.8238}, {"Sales": 155.176, "Profit": -462.8624}, {"Sales": 115.736, "Profit": 7.2576}, {"Sales": 46.72, "Profit": 17.52}, {"Sales": 22.75, "Profit": 11.375}, {"Sales": 119.04, "Profit": 7.668}, {"Sales": 249.95, "Profit": 87.4825}, {"Sales": 51.14, "Profit": 473.6106}, {"Sales": 2799.96, "Profit": 944.9865}, {"Sales": 11.264, "Profit": 3.9424}, {"Sales": 51.84, "Profit": 25.4016}, {"Sales": 11.16, "Profit": 2.79}, {"Sales": 371.97, "Profit": 79.1934}, {"Sales": 2212.968, "Profit": 3919.9888}, {"Sales": 276.568, "Profit": 0.0}, {"Sales": 197.976, "Profit": 28.497}, {"Sales": 14.352, "Profit": 5.2026}, {"Sales": 177.952, "Profit": 15.5904}, {"Sales": 449.1, "Profit": -643.71}, {"Sales": 29.98, "Profit": 8.0946}, {"Sales": 149.96, "Profit": 25.5112}, {"Sales": 125.54, "Profit": 3.462}, {"Sales": 133.848, "Profit": 0.7704}, {"Sales": 5.715, "Profit": -4.7625}, {"Sales": 539.764, "Profit": -192.0468}, {"Sales": 641.97, "Profit": 69.9965}, {"Sales": 334.568, "Profit": 28.1372}, {"Sales": 13.208, "Profit": 4.6228}, {"Sales": 1810.9, "Profit": 373.779}, {"Sales": 170.88, "Profit": 49.5552}, {"Sales": 418.85, "Profit": 3.8655}, {"Sales": 61.38, "Profit": 15.9588}, {"Sales": 523.92, "Profit": -26.196}, {"Sales": 82.682, "Profit": -3.788}, {"Sales": 119.1, "Profit": 34.539}, {"Sales": 165.76, "Profit": 24.2696}, {"Sales": 178.1, "Profit": 43.706}, {"Sales": 358.576, "Profit": 25.0182}, {"Sales": 91.99, "Profit": 2.0271}, {"Sales": 71.976, "Profit": 8.997}, {"Sales": 156.512, "Profit": 52.8228}, {"Sales": 117.02, "Profit": 4.4856}, {"Sales": 692.984, "Profit": 50.3988}, {"Sales": 479.984, "Profit": 89.997}, {"Sales": 723.4, "Profit": 15.552}, {"Sales": 115.36, "Profit": 3.0096}, {"Sales": 154.86, "Profit": 65.7342}, {"Sales": 150.336, "Profit": 14.0712}, {"Sales": 67.56, "Profit": 8.445}, {"Sales": 234.98, "Profit": 69.993}, {"Sales": 99.585, "Profit": -18.0385}, {"Sales": 469.94, "Profit": 67.941}, {"Sales": 900.08, "Profit": 117.0104}, {"Sales": 25.92, "Profit": 9.072}, {"Sales": 68.04, "Profit": 19.7316}, {"Sales": 149.352, "Profit": 8.2764}, {"Sales": 6.286, "Profit": -11.0005}, {"Sales": 107.296, "Profit": -3.9032}, {"Sales": 118.736, "Profit": 7.2576}, {"Sales": 1021.4, "Profit": 5.096}, {"Sales": 10.368, "Profit": 3.6288}, {"Sales": 120.0, "Profit": 46.8}, {"Sales": 171.94, "Profit": 14.2632}, {"Sales": 351.352, "Profit": -15.7176}, {"Sales": 170.08, "Profit": 15.336}, {"Sales": 301.47, "Profit": -241.176}, {"Sales": 1677.188, "Profit": -1306.5504}, {"Sales": 760.116, "Profit": -71.8116}, {"Sales": 272.94, "Profit": 30.0234}, {"Sales": 108.672, "Profit": 2.502}, {"Sales": 123.35, "Profit": 13.608}, {"Sales": 4439.174, "Profit": -630.882}, {"Sales": 32.4, "Profit": 15.552}, {"Sales": 110.92, "Profit": 12.4416}, {"Sales": 59.184, "Profit": 5.1786}, {"Sales": 19.096, "Profit": 6.6836}, {"Sales": 87.988, "Profit": -1.4413}, {"Sales": 92.202, "Profit": -1.5414}, {"Sales": 130.04, "Profit": 12.264}, {"Sales": 25.92, "Profit": 12.4416}, {"Sales": 18.96, "Profit": 7.584}, {"Sales": 299.576, "Profit": 90.6444}, {"Sales": 1564.29, "Profit": 406.7154}, {"Sales": 160.9, "Profit": 8.799}, {"Sales": 302.376, "Profit": 22.6782}, {"Sales": 50.96, "Profit": 25.48}, {"Sales": 33.52, "Profit": 3.352}, {"Sales": 719.58, "Profit": -158.102}, {"Sales": 149.616, "Profit": 5.5616}, {"Sales": 141.85, "Profit": 50.328}, {"Sales": 231.68, "Profit": 50.5632}, {"Sales": 699.98, "Profit": 195.9944}, {"Sales": 35.89, "Profit": 16.1505}, {"Sales": 1270.99, "Profit": 635.495}, {"Sales": 20.568, "Profit": 1.5426}, {"Sales": 140.28, "Profit": 6.512}, {"Sales": 127.368, "Profit": 37.1084}, {"Sales": 71.824, "Profit": 0.6156}, {"Sales": 18.45, "Profit": 8.6715}, {"Sales": 68.64, "Profit": 17.16}, {"Sales": 125.984, "Profit": -7.996}, {"Sales": 129.424, "Profit": 1.07}, {"Sales": 120.47, "Profit": 22.2516}, {"Sales": 15.984, "Profit": 4.995}, {"Sales": 7.712, "Profit": 2.7956}, {"Sales": 9.296, "Profit": 3.0212}, {"Sales": 16.56, "Profit": -2.484}, {"Sales": 116.08, "Profit": 5.265}, {"Sales": 352.38, "Profit": 81.0474}, {"Sales": 148.448, "Profit": 8.8624}, {"Sales": 130.14, "Profit": 13.5072}, {"Sales": 96.968, "Profit": 2.6964}, {"Sales": 399.98, "Profit": -65.568}, {"Sales": 1336.44, "Profit": 387.5676}, {"Sales": 400.84, "Profit": 47.98}, {"Sales": 33.488, "Profit": 5.8604}, {"Sales": 431.976, "Profit": -75.5958}, {"Sales": 170.8, "Profit": 56.55}, {"Sales": 261.28, "Profit": 23.028}, {"Sales": 186.92, "Profit": 23.7864}, {"Sales": 42.784, "Profit": 15.5092}, {"Sales": 213.552, "Profit": -2.6936}, {"Sales": 150.66, "Profit": 6.0264}, {"Sales": 2430.08, "Profit": 388.8128}, {"Sales": 276.784, "Profit": 89.9548}, {"Sales": 33.48, "Profit": 1.3392}, {"Sales": 94.912, "Profit": 1.2714}, {"Sales": 15.8, "Profit": 2.37}, {"Sales": 882.24, "Profit": 143.04}, {"Sales": 104.84, "Profit": -179.776}, {"Sales": 799.48, "Profit": 385.3752}, {"Sales": 51.897, "Profit": -41.5176}, {"Sales": 39.68, "Profit": 10.3168}, {"Sales": 3.98, "Profit": -6.567}, {"Sales": 12.992, "Profit": -0.812}, {"Sales": 134.568, "Profit": -5.6784}, {"Sales": 72.0, "Profit": 14.4}, {"Sales": 177.48, "Profit": 19.9665}, {"Sales": 2284.41, "Profit": 375.735}, {"Sales": 568.728, "Profit": 28.4364}, {"Sales": 44.4, "Profit": 22.2}, {"Sales": 25.176, "Profit": -33.3582}, {"Sales": 115.584, "Profit": 23.7742}, {"Sales": 20.58, "Profit": 5.5566}, {"Sales": 384.45, "Profit": 103.8015}, {"Sales": 8.34, "Profit": 2.1684}, {"Sales": 179.704, "Profit": 19.1376}, {"Sales": 64.14, "Profit": 30.7872}, {"Sales": 135.68, "Profit": 4.3368}, {"Sales": 145.28, "Profit": 3.246}, {"Sales": 3.486, "Profit": -2.7888}, {"Sales": 61.12, "Profit": 20.7808}, {"Sales": 34.58, "Profit": 10.0282}, {"Sales": 466.46, "Profit": 20.538}, {"Sales": 7.04, "Profit": 3.0976}, {"Sales": 18.92, "Profit": 7.3788}, {"Sales": 27.72, "Profit": 3.465}, {"Sales": 47.968, "Profit": 4.1972}, {"Sales": 139.92, "Profit": 2.464}, {"Sales": 105.564, "Profit": -2.97}, {"Sales": 37.94, "Profit": 18.2112}, {"Sales": 364.74, "Profit": 109.422}, {"Sales": 151.192, "Profit": 13.2293}, {"Sales": 129.952, "Profit": 16.1838}, {"Sales": 1015.552, "Profit": 1.2432}, {"Sales": 134.6, "Profit": 13.604}, {"Sales": 9.216, "Profit": 3.3408}, {"Sales": 71.976, "Profit": 7.1976}, {"Sales": 197.97, "Profit": 53.4519}, {"Sales": 204.8, "Profit": 43.45}, {"Sales": 194.528, "Profit": 24.316}, {"Sales": 191.88, "Profit": 19.188}, {"Sales": 901.94, "Profit": 157.1292}, {"Sales": 109.158, "Profit": -3.465}, {"Sales": 142.16, "Profit": 9.816}, {"Sales": 32.4, "Profit": 15.552}, {"Sales": 183.84, "Profit": 62.5056}, {"Sales": 456.46, "Profit": 9.8856}, {"Sales": 140.9, "Profit": 28.755}, {"Sales": 339.92, "Profit": 8.498}, {"Sales": 126.608, "Profit": 6.7032}, {"Sales": 164.48, "Profit": 20.844}, {"Sales": 28.85, "Profit": 14.425}, {"Sales": 148.69, "Profit": 9.1581}, {"Sales": 124.55, "Profit": 12.0295}, {"Sales": 91.84, "Profit": 4.9104}, {"Sales": 115.06, "Profit": -10.05}, {"Sales": 917.4, "Profit": 148.138}, {"Sales": 483.136, "Profit": 60.392}, {"Sales": 106.7, "Profit": 26.082}, {"Sales": 41.568, "Profit": 2.598}, {"Sales": 438.95, "Profit": 143.982}, {"Sales": 11.88, "Profit": 5.346}, {"Sales": 105.336, "Profit": -32.088}, {"Sales": 113.24, "Profit": 2.6208}, {"Sales": 46.53, "Profit": 13.0284}, {"Sales": 311.97, "Profit": 113.9886}, {"Sales": 22.92, "Profit": 11.2308}, {"Sales": 254.97, "Profit": 91.7892}, {"Sales": 175.96, "Profit": 80.3404}, {"Sales": 3357.6, "Profit": 377.73}, {"Sales": 113.184, "Profit": 2.245}, {"Sales": 5.98, "Profit": 1.0166}, {"Sales": 18.528, "Profit": -27.792}, {"Sales": 98.41, "Profit": 2.0286}, {"Sales": 368.97, "Profit": 81.1734}, {"Sales": 12.192, "Profit": 4.1148}, {"Sales": 36.744, "Profit": 3.6744}, {"Sales": 118.192, "Profit": 4.6552}, {"Sales": 7.16, "Profit": 3.4368}, {"Sales": 89.568, "Profit": 32.4684}, {"Sales": 146.75, "Profit": 21.9975}, {"Sales": 90.57, "Profit": 11.7741}, {"Sales": 649.92, "Profit": 181.176}, {"Sales": 103.2, "Profit": 12.052}, {"Sales": 1259.86, "Profit": 361.2994}, {"Sales": 122.32, "Profit": 2.7028}, {"Sales": 86.556, "Profit": -4.2012}, {"Sales": 119.56, "Profit": 3.852}, {"Sales": 124.528, "Profit": 4.4004}, {"Sales": 24.1, "Profit": 9.158}, {"Sales": 101.744, "Profit": -11.4648}, {"Sales": 812.736, "Profit": 60.9552}, {"Sales": 86.058, "Profit": -63.1092}, {"Sales": 39.0, "Profit": 11.31}, {"Sales": 520.376, "Profit": 52.9173}, {"Sales": 209.148, "Profit": -66.2302}, {"Sales": 113.44, "Profit": 21.2856}, {"Sales": 145.84, "Profit": 13.428}, {"Sales": 99.98, "Profit": 42.9914}, {"Sales": 220.064, "Profit": 12.504}, {"Sales": 383.952, "Profit": 76.7904}, {"Sales": 44.736, "Profit": 4.4736}, {"Sales": 280.352, "Profit": 9.0882}, {"Sales": 1.872, "Profit": -1.4352}, {"Sales": 158.168, "Profit": -6.396}, {"Sales": 168.264, "Profit": 7.6896}, {"Sales": 20.704, "Profit": 7.764}, {"Sales": 132.984, "Profit": 3.6192}, {"Sales": 175.952, "Profit": 17.994}, {"Sales": 8.78, "Profit": 2.2828}, {"Sales": 725.988, "Profit": -113.998}, {"Sales": 212.94, "Profit": 25.5528}, {"Sales": 618.768, "Profit": 60.4768}, {"Sales": 14.136, "Profit": -7.7748}, {"Sales": 455.6, "Profit": -93.08}, {"Sales": 118.88, "Profit": 17.5812}, {"Sales": 122.4, "Profit": 4.756}, {"Sales": 35.568, "Profit": 5.7798}, {"Sales": 48.664, "Profit": 15.8158}, {"Sales": 5.184, "Profit": 1.8144}, {"Sales": 522.984, "Profit": 152.495}, {"Sales": 12.672, "Profit": 2.6928}, {"Sales": 85.595, "Profit": -6.303}, {"Sales": 669.64, "Profit": 107.0388}, {"Sales": 137.408, "Profit": 9.5418}, {"Sales": 3.52, "Profit": 1.0208}, {"Sales": 186.45, "Profit": 39.948}, {"Sales": 34.7, "Profit": 12.492}, {"Sales": 844.116, "Profit": -36.1764}, {"Sales": 47.92, "Profit": 11.98}, {"Sales": 843.6, "Profit": 240.294}, {"Sales": 99.824, "Profit": 2.5707}, {"Sales": 1001.584, "Profit": 125.198}, {"Sales": 479.97, "Profit": 177.5889}, {"Sales": 460.84, "Profit": 314.0384}, {"Sales": 89.72, "Profit": 2.943}, {"Sales": 39.76, "Profit": 18.6872}, {"Sales": 194.848, "Profit": 12.178}, {"Sales": 279.944, "Profit": 48.9902}, {"Sales": 5399.91, "Profit": 2591.9568}, {"Sales": 600.672, "Profit": 65.3256}, {"Sales": 332.94, "Profit": 9.9882}, {"Sales": 15.712, "Profit": 5.6956}, {"Sales": 145.764, "Profit": -8.098}, {"Sales": 15.528, "Profit": 5.823}, {"Sales": 191.98, "Profit": 51.8346}, {"Sales": 434.032, "Profit": -1.3208}, {"Sales": 133.594, "Profit": -7.2589}, {"Sales": 92.188, "Profit": -0.99}, {"Sales": 144.552, "Profit": 5.4432}, {"Sales": 671.544, "Profit": 50.3658}, {"Sales": 194.352, "Profit": -36.441}, {"Sales": 116.672, "Profit": 3.96}, {"Sales": 235.846, "Profit": 2.3094}, {"Sales": 111.888, "Profit": -11.0208}, {"Sales": 95.2, "Profit": 27.608}, {"Sales": 85.68, "Profit": 6.888}, {"Sales": 348.568, "Profit": 9.1764}, {"Sales": 8.288, "Profit": 3.0044}, {"Sales": 69.52, "Profit": 17.38}, {"Sales": 81.572, "Profit": -3.81}, {"Sales": 697.16, "Profit": 146.4036}, {"Sales": 107.968, "Profit": 2.8884}, {"Sales": 132.236, "Profit": -26.2476}, {"Sales": 584.82, "Profit": 70.1784}, {"Sales": 22.72, "Profit": 6.5888}, {"Sales": 4.044, "Profit": -2.8308}, {"Sales": 145.784, "Profit": -13.5882}, {"Sales": 117.71, "Profit": 2.7846}, {"Sales": 106.792, "Profit": -5.7148}, {"Sales": 85.607, "Profit": -3.9249}, {"Sales": 676.55, "Profit": 6.7655}, {"Sales": 89.48, "Profit": 8.2156}, {"Sales": 6.888, "Profit": -5.0512}, {"Sales": 4.08, "Profit": 1.9176}, {"Sales": 11.52, "Profit": 3.456}, {"Sales": 119.168, "Profit": 6.4692}, {"Sales": 2443.2, "Profit": 209.58}, {"Sales": 158.184, "Profit": -29.4368}, {"Sales": 1297.368, "Profit": 97.3026}, {"Sales": 126.76, "Profit": 0.7728}, {"Sales": 290.784, "Profit": -417.0936}, {"Sales": 485.9, "Profit": 7.945}, {"Sales": 492.835, "Profit": -14.081}, {"Sales": 135.016, "Profit": 4.7304}, {"Sales": 654.976, "Profit": -7.7247}, {"Sales": 280.782, "Profit": -60.8361}, {"Sales": 110.376, "Profit": 12.4173}, {"Sales": 102.82, "Profit": 3.2406}, {"Sales": 3.0, "Profit": 1.05}, {"Sales": 1912.946, "Profit": -377.9892}, {"Sales": 141.51, "Profit": 1.8604}, {"Sales": 136.784, "Profit": 5.1294}, {"Sales": 704.408, "Profit": 42.588}, {"Sales": 11.67, "Profit": 5.6016}, {"Sales": 70.08, "Profit": 24.528}, {"Sales": 137.936, "Profit": 6.0412}, {"Sales": 116.12, "Profit": 11.3288}, {"Sales": 149.512, "Profit": 2.2512}, {"Sales": 100.9, "Profit": 28.95}, {"Sales": 432.98, "Profit": 109.7544}, {"Sales": 113.392, "Profit": 3.1806}, {"Sales": 13.216, "Profit": 4.4604}, {"Sales": 180.588, "Profit": -34.647}, {"Sales": 1591.02, "Profit": 286.3836}, {"Sales": 184.99, "Profit": 54.3966}, {"Sales": 135.68, "Profit": 4.3368}, {"Sales": 108.89, "Profit": 1.0114}, {"Sales": 136.68, "Profit": 26.7904}, {"Sales": 186.75, "Profit": 24.84}, {"Sales": 87.71, "Profit": 41.2237}, {"Sales": 427.544, "Profit": 1.9224}, {"Sales": 17.64, "Profit": 8.6436}, {"Sales": 2077.86, "Profit": 366.6348}, {"Sales": 91.96, "Profit": -20.691}, {"Sales": 70.88, "Profit": 33.3136}, {"Sales": 10.272, "Profit": 3.21}, {"Sales": 186.54, "Profit": 41.0388}, {"Sales": 20.32, "Profit": 6.9088}, {"Sales": 5.46, "Profit": 1.5288}, {"Sales": 91.96, "Profit": 25.7488}, {"Sales": 146.73, "Profit": 68.9631}, {"Sales": 149.92, "Profit": 9.2568}, {"Sales": 1406.938, "Profit": 139.5702}, {"Sales": 146.65, "Profit": 10.395}, {"Sales": 92.44, "Profit": 3.393}, {"Sales": 142.984, "Profit": 25.5968}, {"Sales": 98.16, "Profit": 2.79}, {"Sales": 116.991, "Profit": 8.0991}, {"Sales": 657.552, "Profit": 49.3164}, {"Sales": 93.808, "Profit": -1.9656}, {"Sales": 104.79, "Profit": 29.3412}, {"Sales": 3409.952, "Profit": 1049.985}, {"Sales": 93.76, "Profit": 3.546}, {"Sales": 131.072, "Profit": 4.1448}, {"Sales": 2029.62, "Profit": 33.3124}, {"Sales": 191.6, "Profit": 91.968}, {"Sales": 122.96, "Profit": 4.6812}, {"Sales": 102.8, "Profit": 4.224}, {"Sales": 192.8, "Profit": 55.912}, {"Sales": 337.116, "Profit": -4.2588}, {"Sales": 267.024, "Profit": -55.256}, {"Sales": 111.66, "Profit": 36.1836}, {"Sales": 431.928, "Profit": 64.7892}, {"Sales": 17.34, "Profit": 8.4966}, {"Sales": 105.672, "Profit": 1.5768}, {"Sales": 408.744, "Profit": 76.6395}, {"Sales": 170.97, "Profit": 20.3898}, {"Sales": 159.984, "Profit": 43.9956}, {"Sales": 22.32, "Profit": 10.7136}, {"Sales": 354.84, "Profit": 22.0032}, {"Sales": 31.86, "Profit": 11.151}, {"Sales": 348.84, "Profit": 170.9316}, {"Sales": 195.42, "Profit": 41.8608}, {"Sales": 127.37, "Profit": 6.9258}, {"Sales": 84.272, "Profit": -75.8448}, {"Sales": 408.976, "Profit": 81.5949}, {"Sales": 132.56, "Profit": 1.9024}, {"Sales": 132.994, "Profit": -63.996}, {"Sales": 650.4648, "Profit": -119.1918}, {"Sales": 466.768, "Profit": 52.5114}, {"Sales": 8.72, "Profit": 3.5752}, {"Sales": 113.176, "Profit": 14.5638}, {"Sales": 19.92, "Profit": 6.5736}, {"Sales": 102.8, "Profit": 31.188}, {"Sales": 100.96, "Profit": 6.2208}, {"Sales": 659.9, "Profit": 217.767}, {"Sales": 65.79, "Profit": 30.2634}, {"Sales": 422.058, "Profit": -18.0882}, {"Sales": 140.81, "Profit": 39.4268}, {"Sales": 93.968, "Profit": 2.5896}, {"Sales": 172.5, "Profit": 51.75}, {"Sales": 12.39, "Profit": 5.6994}, {"Sales": 59.48, "Profit": 8.922}, {"Sales": 607.132, "Profit": 49.761}, {"Sales": 21.78, "Profit": 5.6628}, {"Sales": 396.08, "Profit": 9.102}, {"Sales": 135.82, "Profit": 11.8206}, {"Sales": 822.024, "Profit": -112.9527}, {"Sales": 112.472, "Profit": 7.6416}, {"Sales": 89.97, "Profit": 39.5868}, {"Sales": 12.96, "Profit": 6.2208}, {"Sales": 173.94, "Profit": 13.9152}, {"Sales": 134.8, "Profit": 9.3125}, {"Sales": 114.664, "Profit": 3.3534}, {"Sales": 1127.976, "Profit": 126.8973}, {"Sales": 173.24, "Profit": 17.324}, {"Sales": 25.92, "Profit": 12.4416}, {"Sales": 312.03, "Profit": 43.6842}, {"Sales": 42.976, "Profit": 4.2976}, {"Sales": 17.3, "Profit": 8.304}, {"Sales": 96.24, "Profit": -5.184}, {"Sales": 12.201, "Profit": -9.7608}, {"Sales": 99.192, "Profit": 5.5071}, {"Sales": 328.96, "Profit": 35.49}, {"Sales": 37.464, "Profit": 12.1758}, {"Sales": 162.35, "Profit": 16.175}, {"Sales": 159.56, "Profit": 33.9065}, {"Sales": 3013.95, "Profit": 1439.976}, {"Sales": 1.272, "Profit": -2.1624}, {"Sales": 131.56, "Profit": 11.5432}, {"Sales": 299.528, "Profit": -47.3968}, {"Sales": 127.88, "Profit": -67.137}, {"Sales": 1600.94, "Profit": 757.4112}, {"Sales": 307.11, "Profit": 62.9064}, {"Sales": 122.56, "Profit": -20.448}, {"Sales": 112.84, "Profit": 9.6375}, {"Sales": 194.352, "Profit": 19.4352}, {"Sales": 133.048, "Profit": -0.9012}, {"Sales": 504.43, "Profit": -124.431}, {"Sales": 125.28, "Profit": 19.2472}, {"Sales": 12.957, "Profit": -9.5018}, {"Sales": 85.896, "Profit": 0.6672}, {"Sales": 160.784, "Profit": -0.5598}, {"Sales": 10.272, "Profit": 3.4668}, {"Sales": 116.96, "Profit": 2.6784}, {"Sales": 86.88, "Profit": 2.5216}, {"Sales": 69.5, "Profit": 20.155}, {"Sales": 3.282, "Profit": -2.6256}, {"Sales": 136.982, "Profit": -10.7964}, {"Sales": 90.24, "Profit": 8.5728}, {"Sales": 87.39, "Profit": 5.6994}, {"Sales": 9.728, "Profit": 3.2832}, {"Sales": 58.34, "Profit": 28.0032}, {"Sales": 149.38, "Profit": 8.69}, {"Sales": 57.582, "Profit": -44.1462}, {"Sales": 253.92, "Profit": 23.992}, {"Sales": 649.73, "Profit": 166.0698}, {"Sales": 318.32, "Profit": 8.208}, {"Sales": 102.592, "Profit": 10.2592}, {"Sales": 839.988, "Profit": 69.999}, {"Sales": 123.91, "Profit": 4.5657}, {"Sales": 154.94, "Profit": 15.992}, {"Sales": 133.008, "Profit": 11.565}, {"Sales": 128.4, "Profit": 62.916}, {"Sales": 120.97, "Profit": 37.7874}, {"Sales": 111.6, "Profit": 14.8}, {"Sales": 102.36, "Profit": -3.8385}, {"Sales": 97.0, "Profit": 1.05}, {"Sales": 124.2, "Profit": 6.674}, {"Sales": 1121.568, "Profit": 0.0}, {"Sales": 29.52, "Profit": 14.4648}, {"Sales": 109.176, "Profit": -7.0146}, {"Sales": 674.95, "Profit": 163.787}, {"Sales": 14.03, "Profit": 4.0687}, {"Sales": 150.9, "Profit": 15.372}, {"Sales": 49.12, "Profit": 23.0864}, {"Sales": 143.4, "Profit": 11.88}, {"Sales": 41.96, "Profit": 10.9096}, {"Sales": 156.96, "Profit": 22.3888}, {"Sales": 20.936, "Profit": 7.0659}, {"Sales": 2261.936, "Profit": 223.9936}, {"Sales": 117.696, "Profit": 7.0512}, {"Sales": 149.448, "Profit": 7.3008}, {"Sales": 121.6, "Profit": 55.936}, {"Sales": 1666.7, "Profit": 459.396}, {"Sales": 147.12, "Profit": 23.0864}, {"Sales": 27.396, "Profit": -20.0904}, {"Sales": 673.568, "Profit": 252.588}, {"Sales": 118.99, "Profit": 33.3172}, {"Sales": 18.624, "Profit": 6.2856}, {"Sales": 118.98, "Profit": 4.2392}, {"Sales": 96.84, "Profit": 5.6832}, {"Sales": 104.85, "Profit": 28.3095}, {"Sales": 15.552, "Profit": 5.4432}, {"Sales": 540.048, "Profit": -47.2542}, {"Sales": 230.784, "Profit": -22.1382}, {"Sales": 354.64, "Profit": 89.7792}, {"Sales": 1300.45, "Profit": 244.6155}, {"Sales": 47.208, "Profit": 15.3426}, {"Sales": 10.02, "Profit": 4.4088}, {"Sales": 359.98, "Profit": 21.5988}, {"Sales": 108.064, "Profit": 0.1548}, {"Sales": 2087.56, "Profit": 511.368}, {"Sales": 102.344, "Profit": 7.92}, {"Sales": 112.776, "Profit": -8.4582}, {"Sales": 103.744, "Profit": 6.795}, {"Sales": 18.16, "Profit": 6.583}, {"Sales": 129.736, "Profit": 14.7668}, {"Sales": 115.23, "Profit": 7.3359}, {"Sales": 32.4, "Profit": 15.552}, {"Sales": 1474.802, "Profit": -21.0686}, {"Sales": 431.976, "Profit": -75.5958}, {"Sales": 348.92, "Profit": 7.0048}, {"Sales": 127.95, "Profit": 21.7515}, {"Sales": 130.896, "Profit": -4.7784}, {"Sales": 14.16, "Profit": 5.133}, {"Sales": 103.52, "Profit": 22.2352}, {"Sales": 11.952, "Profit": 4.1832}, {"Sales": 1117.92, "Profit": 55.896}, {"Sales": 935.38, "Profit": 157.8702}, {"Sales": 118.0, "Profit": 4.42}, {"Sales": 177.97, "Profit": 40.3128}, {"Sales": 99.24, "Profit": 3.0576}, {"Sales": 127.91, "Profit": 4.6221}, {"Sales": 56.45, "Profit": 14.677}, {"Sales": 6.48, "Profit": 3.1104}, {"Sales": 27.93, "Profit": 8.0997}, {"Sales": 87.96, "Profit": 2.3312}, {"Sales": 751.92, "Profit": 150.384}, {"Sales": 9.584, "Profit": 3.3544}, {"Sales": 43.12, "Profit": 15.092}, {"Sales": 130.36, "Profit": -7.3015}, {"Sales": 125.762, "Profit": -15.1311}, {"Sales": 285.97, "Profit": 51.2943}, {"Sales": 127.44, "Profit": 27.9344}, {"Sales": 20.736, "Profit": 7.2576}, {"Sales": 1829.632, "Profit": -337.806}, {"Sales": 344.372, "Profit": -93.4724}, {"Sales": 8.32, "Profit": 2.808}, {"Sales": 314.55, "Profit": 150.984}, {"Sales": 21.3, "Profit": 8.733}, {"Sales": 25.3, "Profit": 11.891}, {"Sales": 120.53, "Profit": 21.506}, {"Sales": 149.98, "Profit": 15.6744}, {"Sales": 124.31, "Profit": 3.4357}, {"Sales": 11.96, "Profit": 5.8604}, {"Sales": 111.984, "Profit": -56.0592}, {"Sales": 157.92, "Profit": 17.766}, {"Sales": 1302.968, "Profit": -2.3904}, {"Sales": 1294.75, "Profit": 336.635}, {"Sales": 421.36, "Profit": 106.7808}, {"Sales": 139.64, "Profit": 2.7664}, {"Sales": 160.784, "Profit": -28.6272}, {"Sales": 936.229, "Profit": -4.1832}, {"Sales": 353.028, "Profit": -348.6294}, {"Sales": 137.96, "Profit": 33.5888}, {"Sales": 6.48, "Profit": 3.1104}, {"Sales": 44.75, "Profit": 8.5025}, {"Sales": 292.696, "Profit": 64.674}, {"Sales": 197.66, "Profit": 84.9436}, {"Sales": 180.96, "Profit": 51.1872}, {"Sales": 3999.95, "Profit": 1159.9855}, {"Sales": 105.68, "Profit": 5.397}, {"Sales": 131.36, "Profit": 25.0536}, {"Sales": 379.372, "Profit": -119.2312}, {"Sales": 938.82, "Profit": 227.205}, {"Sales": 135.96, "Profit": 32.688}, {"Sales": 127.576, "Profit": 10.3194}, {"Sales": 110.288, "Profit": 3.0044}, {"Sales": 701.372, "Profit": -50.098}, {"Sales": 386.184, "Profit": 6.074}, {"Sales": 93.776, "Profit": 2.4582}, {"Sales": 12.99, "Profit": 0.7794}, {"Sales": 72.64, "Profit": 21.792}, {"Sales": 334.88, "Profit": 29.302}, {"Sales": 243.88, "Profit": 27.4365}, {"Sales": 237.52, "Profit": 54.9504}, {"Sales": 127.5, "Profit": 10.875}, {"Sales": 10.368, "Profit": 3.7584}, {"Sales": 389.56, "Profit": 104.568}, {"Sales": 131.16, "Profit": 12.8184}, {"Sales": 26.86, "Profit": 6.715}, {"Sales": 100.96, "Profit": 5.382}, {"Sales": 106.59, "Profit": 42.1314}, {"Sales": 124.608, "Profit": -23.364}, {"Sales": 450.296, "Profit": 5.2287}, {"Sales": 100.32, "Profit": 3.741}, {"Sales": 15.552, "Profit": 5.6376}, {"Sales": 443.4, "Profit": 146.79}, {"Sales": 102.76, "Profit": 5.7624}, {"Sales": 295.4, "Profit": -62.7725}, {"Sales": 47.9, "Profit": 22.992}, {"Sales": 4.98, "Profit": 2.2908}, {"Sales": 15.552, "Profit": 5.4432}, {"Sales": 152.83, "Profit": 9.5571}, {"Sales": 14.16, "Profit": 1.062}, {"Sales": 23.56, "Profit": 7.068}, {"Sales": 83.648, "Profit": -2.7968}, {"Sales": 185.58, "Profit": 76.0878}, {"Sales": 212.958, "Profit": 94.4937}, {"Sales": 12.96, "Profit": 6.2208}, {"Sales": 142.568, "Profit": -18.4548}, {"Sales": 122.312, "Profit": 0.6624}, {"Sales": 442.372, "Profit": -729.9138}, {"Sales": 146.712, "Profit": 8.714}, {"Sales": 95.92, "Profit": 2.214}, {"Sales": 99.846, "Profit": -83.205}, {"Sales": 160.32, "Profit": 44.8896}, {"Sales": 287.91, "Profit": 33.5895}, {"Sales": 703.71, "Profit": -938.28}, {"Sales": 271.96, "Profit": 27.196}, {"Sales": 123.78, "Profit": 9.1674}, {"Sales": 156.56, "Profit": 15.2712}, {"Sales": 14.9, "Profit": 7.152}, {"Sales": 100.704, "Profit": -16.3644}, {"Sales": 3.15, "Profit": 1.512}, {"Sales": 207.28, "Profit": 72.8088}, {"Sales": 34.248, "Profit": 11.5587}, {"Sales": 207.96, "Profit": 59.4355}, {"Sales": 132.38, "Profit": 12.1348}, {"Sales": 342.96, "Profit": 37.495}, {"Sales": 150.5, "Profit": 15.525}, {"Sales": 166.816, "Profit": 17.8152}, {"Sales": 1.192, "Profit": -2.0264}, {"Sales": 1.8, "Profit": -2.88}, {"Sales": 738.064, "Profit": -63.0056}, {"Sales": 199.372, "Profit": -35.5136}, {"Sales": 928.388, "Profit": -35.6174}, {"Sales": 84.784, "Profit": -20.1362}, {"Sales": 84.842, "Profit": -3.3894}, {"Sales": 26.176, "Profit": -3.272}, {"Sales": 242.46, "Profit": 99.23}, {"Sales": 7.872, "Profit": 0.5904}, {"Sales": 1599.92, "Profit": 751.9624}, {"Sales": 103.68, "Profit": 6.216}, {"Sales": 835.17, "Profit": 16.7034}, {"Sales": 131.88, "Profit": 14.8365}, {"Sales": 629.184, "Profit": 228.0792}, {"Sales": 373.08, "Profit": 100.7316}, {"Sales": 23.48, "Profit": 8.218}, {"Sales": 14.4, "Profit": 7.056}, {"Sales": 9.568, "Profit": 2.99}, {"Sales": 213.136, "Profit": 12.1176}, {"Sales": 316.0, "Profit": 31.6}, {"Sales": 238.56, "Profit": 26.2416}, {"Sales": 24.032, "Profit": -0.6008}, {"Sales": 272.32, "Profit": 25.011}, {"Sales": 11.264, "Profit": 1.2672}, {"Sales": 3040.0, "Profit": 1459.2}, {"Sales": 166.73, "Profit": 56.0547}, {"Sales": 207.76, "Profit": 85.1816}, {"Sales": 26.352, "Profit": -18.4464}, {"Sales": 21.48, "Profit": 10.5252}, {"Sales": 363.018, "Profit": -183.6324}, {"Sales": 7.896, "Profit": 2.4675}, {"Sales": 110.096, "Profit": 33.0288}, {"Sales": 75.96, "Profit": 22.788}, {"Sales": 95.248, "Profit": 3.3524}, {"Sales": 37.44, "Profit": 11.7}, {"Sales": 940.224, "Profit": 89.2224}, {"Sales": 1927.59, "Profit": 751.7601}, {"Sales": 124.03, "Profit": 4.0687}, {"Sales": 579.136, "Profit": 21.7176}, {"Sales": 111.888, "Profit": 22.3776}, {"Sales": 8.32, "Profit": 2.808}, {"Sales": 92.936, "Profit": 9.4284}, {"Sales": 47.616, "Profit": 3.5712}, {"Sales": 372.76, "Profit": 4.2804}, {"Sales": 101.45, "Profit": 14.677}, {"Sales": 38.136, "Profit": 13.3476}, {"Sales": 125.912, "Profit": 1.239}, {"Sales": 195.225, "Profit": -120.513}, {"Sales": 179.568, "Profit": 15.49}, {"Sales": 749.96, "Profit": 14.7184}, {"Sales": 116.344, "Profit": 2.5137}, {"Sales": 167.96, "Profit": 78.9412}, {"Sales": 89.9, "Profit": 6.567}, {"Sales": 668.896, "Profit": -127.5792}, {"Sales": 105.8, "Profit": 25.424}, {"Sales": 216.976, "Profit": 19.1976}, {"Sales": 842.94, "Profit": 160.1586}, {"Sales": 579.058, "Profit": -178.8468}, {"Sales": 339.9, "Profit": 74.975}, {"Sales": 291.24, "Profit": 78.672}, {"Sales": 15.992, "Profit": -2.9985}, {"Sales": 154.136, "Profit": -0.8392}, {"Sales": 101.168, "Profit": -6.396}, {"Sales": 153.66, "Profit": 18.0378}, {"Sales": 142.182, "Profit": -37.9152}, {"Sales": 132.72, "Profit": 11.7568}, {"Sales": 720.96, "Profit": 318.3016}, {"Sales": 137.36, "Profit": 13.5056}, {"Sales": 137.68, "Profit": 5.256}, {"Sales": 1063.63, "Profit": -295.9785}, {"Sales": 429.98, "Profit": 119.4742}, {"Sales": 6.38, "Profit": 2.9348}, {"Sales": 470.91, "Profit": 157.4685}, {"Sales": 109.16, "Profit": 9.816}, {"Sales": 383.8, "Profit": 38.38}, {"Sales": 22.72, "Profit": 7.384}, {"Sales": 241.92, "Profit": -56.448}, {"Sales": 259.896, "Profit": -56.3108}, {"Sales": 17.94, "Profit": 8.073}, {"Sales": 31.56, "Profit": 10.4148}, {"Sales": 359.97, "Profit": 100.7916}, {"Sales": 33.92, "Profit": 13.2288}, {"Sales": 479.95, "Profit": 129.5865}, {"Sales": 80.58, "Profit": 22.5624}, {"Sales": 5.8, "Profit": 2.61}, {"Sales": 44.784, "Profit": 4.4784}, {"Sales": 441.93, "Profit": 2.7279}, {"Sales": 4.752, "Profit": -8.316}, {"Sales": 128.55, "Profit": 24.2285}, {"Sales": 144.36, "Profit": -3.094}, {"Sales": 284.0, "Profit": 38.08}, {"Sales": 282.84, "Profit": 19.7988}, {"Sales": 40.968, "Profit": 13.8267}, {"Sales": 117.67, "Profit": 4.0749}, {"Sales": 423.36, "Profit": 4.008}, {"Sales": 4749.95, "Profit": 2799.984}, {"Sales": 86.2, "Profit": 24.998}, {"Sales": 119.448, "Profit": 2.64}, {"Sales": 434.646, "Profit": 62.7822}, {"Sales": 455.91, "Profit": 9.6957}, {"Sales": 123.372, "Profit": -69.3952}, {"Sales": 133.92, "Profit": 21.5824}, {"Sales": 118.704, "Profit": 16.3172}, {"Sales": 131.86, "Profit": -3.564}, {"Sales": 692.995, "Profit": -935.9595}, {"Sales": 26.55, "Profit": 12.744}, {"Sales": 242.94, "Profit": 4.8588}, {"Sales": 133.288, "Profit": 12.7008}, {"Sales": 135.98, "Profit": 9.1954}, {"Sales": 119.608, "Profit": 1.6704}, {"Sales": 470.155, "Profit": -13.433}, {"Sales": 1272.63, "Profit": -814.4832}, {"Sales": 231.968, "Profit": 28.7952}, {"Sales": 95.97, "Profit": -0.6435}, {"Sales": 4158.912, "Profit": 363.9048}, {"Sales": 628.816, "Profit": 59.4816}, {"Sales": 171.82, "Profit": 19.41}, {"Sales": 26.976, "Profit": 8.7672}, {"Sales": 154.44, "Profit": 1.5444}, {"Sales": 28.485, "Profit": -20.889}, {"Sales": 468.152, "Profit": 0.0}, {"Sales": 115.84, "Profit": 54.4448}, {"Sales": 928.15, "Profit": 251.202}, {"Sales": 73.44, "Profit": 0.504}, {"Sales": 145.12, "Profit": 42.045}, {"Sales": 90.848, "Profit": 2.14}, {"Sales": 179.7, "Profit": 88.053}, {"Sales": 144.152, "Profit": 1.197}, {"Sales": 733.408, "Profit": 77.5584}, {"Sales": 12.96, "Profit": 6.2208}, {"Sales": 83.976, "Profit": -13.6461}, {"Sales": 366.58, "Profit": 17.379}, {"Sales": 60.81, "Profit": 17.0268}, {"Sales": 139.92, "Profit": -150.414}, {"Sales": 105.84, "Profit": 23.1192}, {"Sales": 108.08, "Profit": 3.528}, {"Sales": 59.52, "Profit": 15.4752}, {"Sales": 146.848, "Profit": 3.5256}, {"Sales": 63.968, "Profit": 0.0}, {"Sales": 22.752, "Profit": -8.532}, {"Sales": 109.72, "Profit": 1.2005}, {"Sales": 21.4, "Profit": 6.206}, {"Sales": 376.74, "Profit": 71.162}, {"Sales": 242.3328, "Profit": -36.2352}, {"Sales": 42.6, "Profit": 16.614}, {"Sales": 1101.48, "Profit": 429.5772}, {"Sales": 234.168, "Profit": 15.8376}, {"Sales": 597.0, "Profit": 280.59}, {"Sales": 124.85, "Profit": 28.3095}, {"Sales": 78.304, "Profit": 29.364}, {"Sales": 106.04, "Profit": 1.764}, {"Sales": 43.96, "Profit": 18.4632}, {"Sales": 223.96, "Profit": 11.198}, {"Sales": 12.96, "Profit": 6.2208}, {"Sales": 189.882, "Profit": -94.941}, {"Sales": 99.44, "Profit": 9.3312}, {"Sales": 112.04, "Profit": 3.912}, {"Sales": 15.576, "Profit": 3.3099}, {"Sales": 22.48, "Profit": 10.3408}, {"Sales": 308.132, "Profit": -2.61}, {"Sales": 324.032, "Profit": 5.6112}], "table_preview": [{"__summary__": "correlation", "value": 0.30910727129558613}, {"Sales": 2049.1, "Profit": 10.179}, {"Sales": 128.368, "Profit": 0.8288}, {"Sales": 143.472, "Profit": 14.5152}, {"Sales": 102.768, "Profit": 0.4768}, {"Sales": 97.419, "Profit": -3.0933}, {"Sales": 479.72, "Profit": 52.7692}, {"Sales": 9.552, "Profit": -3.8208}, {"Sales": 276.55, "Profit": 114.9385}, {"Sales": 84.94, "Profit": 4.1124}], "table_csv_url": "/api/visualizations/e9c7cba482c34177928d30a379de2d98/table"}
{"id": "b9b7236ae97d473e9b6b5a7bd39643ee", "kind": "line", "title": "Line of Sales by Payment Mode", "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n(Feel free to use other obvious matches when present.)\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"give me line plot for sales and payment mode\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart.\r\nIf the user mentions 'profit', you must use a profit-like column (not sales).", "chat_id": "1756883857787", "x": "Payment Mode", "y": "Sales", "created_at": "2025-09-05T07:23:37.215465", "dataset_path": "E:\\SecureDocAI\\final_backend_ready\\final_backend\\uploaded_excels\\1756883857787\\SuperStore Sales DataSet.xlsx", "table": [{"Payment Mode": "COD", "Sales": 667417.7513}, {"Payment Mode": "Online", "Sales": 553993.4607}, {"Payment Mode": "Cards", "Sales": 344393.1112}], "table_preview": [{"Payment Mode": "COD", "Sales": 667417.7513}, {"Payment Mode": "Online", "Sales": 553993.4607}, {"Payment Mode": "Cards", "Sales": 344393.1112}], "table_csv_url": "/api/visualizations/b9b7236ae97d473e9b6b5a7bd39643ee/table"}
{"id": "d9adfc0119304191b5fd58473077c121", "kind": "line", "title": "Line of Profit by Region", "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n(Feel free to use other obvious matches when present.)\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"give me line plot for profit and region\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart.\r\nIf the user mentions 'profit', you must use a profit-like column (not sales).", "chat_id": "1756883857787", "x": "Region", "y": "Profit", "created_at": "2025-09-05T07:24:01.795272", "dataset_path": "E:\\SecureDocAI\\final_backend_ready\\final_backend\\uploaded_excels\\1756883857787\\SuperStore Sales DataSet.xlsx", "table": [{"Region": "West", "Profit": 67859.9582}, {"Region": "East", "Profit": 53400.4243}, {"Region": "Central", "Profit": 27450.0071}, {"Region": "South", "Profit": 26551.7163}], "table_preview": [{"Region": "West", "Profit": 67859.9582}, {"Region": "East", "Profit": 53400.4243}, {"Region": "Central", "Profit": 27450.0071}, {"Region": "South", "Profit": 26551.7163}], "table_csv_url": "/api/visualizations/d9adfc0119304191b5fd58473077c121/table"}
{"id": "9cf427915ab04f08b573e080ee860232", "kind": "scatter", "title": "Scatter of Sales by Payment Mode", "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n(Feel free to use other obvious matches when present.)\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"give me scatter plot for sales and payment mode\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart.\r\nIf the user mentions 'profit', you must use a profit-like column (not sales).", "chat_id": "1756883857787", "x": "Payment Mode", "y": "Sales", "created_at": "2025-09-05T07:43:03.609606", "dataset_path": "E:\\SecureDocAI\\final_backend_ready\\final_backend\\uploaded_excels\\1756883857787\\SuperStore Sales DataSet.xlsx", "table": [{"Payment Mode": "COD", "Sales": 667417.7513}, {"Payment Mode": "Online", "Sales": 553993.4607}, {"Payment Mode": "Cards", "Sales": 344393.1112}], "table_preview": [{"Payment Mode": "COD", "Sales": 667417.7513}, {"Payment Mode": "Online", "Sales": 553993.4607}, {"Payment Mode": "Cards", "Sales": 344393.1112}], "table_csv_url": "/api/visualizations/9cf427915ab04f08b573e080ee860232/table"}
{"id": "8d1d7bfce7144e3581349e76e15d8a4e", "kind": "scatter", "title": "Scatter of Profit by Region", "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n(Feel free to use other obvious matches when present.)\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"give me scatter plot for profit and region\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart.\r\nIf the user mentions 'profit', you must use a profit-like column (not sales).", "chat_id": "1756883857787", "x": "Region", "y": "Profit", "created_at": "2025-09-05T07:43:43.799865", "dataset_path": "E:\\SecureDocAI\\final_backend_ready\\final_backend\\uploaded_excels\\1756883857787\\SuperStore Sales DataSet.xlsx", "table": [{"Region": "West", "Profit": 67859.9582}, {"Region": "East", "Profit": 53400.4243}, {"Region": "Central", "Profit": 27450.0071}, {"Region": "South", "Profit": 26551.7163}], "table_preview": [{"Region": "West", "Profit": 67859.9582}, {"Region": "East", "Profit": 53400.4243}, {"Region": "Central", "Profit": 27450.0071}, {"Region": "South", "Profit": 26551.7163}], "table_csv_url": "/api/visualizations/8d1d7bfce7144e3581349e76e15d8a4e/table"}
{"id": "945786113a1347049af783c3940df937", "kind": "pie", "title": "Pie of Sales by Payment Mode", "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n(Feel free to use other obvious matches when present.)\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"give me pie plot for sales and payment mode\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart.\r\nIf the user mentions 'profit', you must use a profit-like column (not sales).", "chat_id": "1756883857787", "x": "Payment Mode", "y": "Sales", "created_at": "2025-09-05T07:52:22.224364", "dataset_path": "E:\\SecureDocAI\\final_backend_ready\\final_backend\\uploaded_excels\\1756883857787\\SuperStore Sales DataSet.xlsx", "table": [{"Payment Mode": "COD", "Sales": 667417.7513}, {"Payment Mode": "Online", "Sales": 553993.4607}, {"Payment Mode": "Cards", "Sales": 344393.1112}], "table_preview": [{"Payment Mode": "COD", "Sales": 667417.7513}, {"Payment Mode": "Online", "Sales": 553993.4607}, {"Payment Mode": "Cards", "Sales": 344393.1112}], "table_csv_url": "/api/visualizations/945786113a1347049af783c3940df937/table"}
{"id": "62b91248d63d48daaac552781016dd0a", "kind": "pie", "title": "Pie of Sales by Payment Mode", "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n(Feel free to use other obvious matches when present.)\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"give me pie plot for sales and payment mode\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart.\r\nIf the user mentions 'profit', you must use a profit-like column (not sales).", "chat_id": "1756883857787", "x": "Payment Mode", "y": "Sales", "created_at": "2025-09-05T09:20:33.227838", "dataset_path": "E:\\SecureDocAI\\final_backend_ready\\final_backend\\uploaded_excels\\1756883857787\\SuperStore Sales DataSet.xlsx", "table": [{"Payment Mode": "COD", "Sales": 667417.7513}, {"Payment Mode": "Online", "Sales": 553993.4607}, {"Payment Mode": "Cards", "Sales": 344393.1112}], "table_preview": [{"Payment Mode": "COD", "Sales": 667417.7513}, {"Payment Mode": "Online", "Sales": 553993.4607}, {"Payment Mode": "Cards", "Sales": 344393.1112}], "table_csv_url": "/api/visualizations/62b91248d63d48daaac552781016dd0a/table", "tableCsvUrl": "/api/visualizations/62b91248d63d48daaac552781016dd0a/table"}
{"id": "e6eb8ff4c9754e799d5ac1a3ab60e1a4", "kind": "pie", "title": "Pie of Sales by Payment Mode", "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n(Feel free to use other obvious matches when present.)\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"give me pie plot for sales and payment mode\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart.\r\nIf the user mentions 'profit', you must use a profit-like column (not sales).", "chat_id": "1756883857787", "x": "Payment Mode", "y": "Sales", "created_at": "2025-09-05T09:31:08.627767", "dataset_path": "E:\\SecureDocAI\\final_backend_ready\\final_backend\\uploaded_excels\\1756883857787\\SuperStore Sales DataSet.xlsx", "table": [{"Payment Mode": "COD", "Sales": 667417.7513}, {"Payment Mode": "Online", "Sales": 553993.4607}, {"Payment Mode": "Cards", "Sales": 344393.1112}], "table_preview": [{"Payment Mode": "COD", "Sales": 667417.7513}, {"Payment Mode": "Online", "Sales": 553993.4607}, {"Payment Mode": "Cards", "Sales": 344393.1112}], "table_csv_url": "/api/visualizations/e6eb8ff4c9754e799d5ac1a3ab60e1a4/table", "tableCsvUrl": "/api/visualizations/e6eb8ff4c9754e799d5ac1a3ab60e1a4/table"}
{"id": "8a11898cd0394a74b8a7c3f95c486181", "kind": "bar", "title": "Bar of Sales by Category", "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n(Feel free to use other obvious matches when present.)\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"plot give me total sale\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart.\r\nIf the user mentions 'profit', you must use a profit-like column (not sales).", "chat_id": "1756883857787", "x": "Category", "y": "Sales", "created_at": "2025-09-05T09:37:27.668588", "dataset_path": "E:\\SecureDocAI\\final_backend_ready\\final_backend\\uploaded_excels\\1756883857787\\SuperStore Sales DataSet.xlsx", "table": [{"Category": "Office Supplies", "Sales": 643707.687}, {"Category": "Technology", "Sales": 470587.991}, {"Category": "Furniture", "Sales": 451508.6452}], "table_preview": [{"Category": "Office Supplies", "Sales": 643707.687}, {"Category": "Technology", "Sales": 470587.991}, {"Category": "Furniture", "Sales": 451508.6452}], "table_csv_url": "/api/visualizations/8a11898cd0394a74b8a7c3f95c486181/table", "tableCsvUrl": "/api/visualizations/8a11898cd0394a74b8a7c3f95c486181/table"}
{"id": "c7f29fcca8574535bde4853c09780970", "kind": "bar", "title": "Bar of Sales by Category", "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n(Feel free to use other obvious matches when present.)\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"plot give me total sale\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart.\r\nIf the user mentions 'profit', you must use a profit-like column (not sales).", "chat_id": "1756883857787", "x": "Category", "y": "Sales", "created_at": "2025-09-05T09:46:49.136855", "dataset_path": "E:\\SecureDocAI\\final_backend_ready\\final_backend\\uploaded_excels\\1756883857787\\SuperStore Sales DataSet.xlsx", "table": [{"Category": "Office Supplies", "Sales": 643707.687}, {"Category": "Technology", "Sales": 470587.991}, {"Category": "Furniture", "Sales": 451508.6452}], "table_preview": [{"Category": "Office Supplies", "Sales": 643707.687}, {"Category": "Technology", "Sales": 470587.991}, {"Category": "Furniture", "Sales": 451508.6452}], "table_csv_url": "/api/visualizations/c7f29fcca8574535bde4853c09780970/table", "tableCsvUrl": "/api/visualizations/c7f29fcca8574535bde4853c09780970/table"}
{"id": "f227f308833842069b93934348bab086", "kind": "bar", "title": "Bar of Sales by Category", "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n(Feel free to use other obvious matches when present.)\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"plot give me total sale\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart.\r\nIf the user mentions 'profit', you must use a profit-like column (not sales).", "chat_id": "1756883857787", "x": "Category", "y": "Sales", "created_at": "2025-09-05T09:47:10.849756", "dataset_path": "E:\\SecureDocAI\\final_backend_ready\\final_backend\\uploaded_excels\\1756883857787\\SuperStore Sales DataSet.xlsx", "table": [{"Category": "Office Supplies", "Sales": 643707.687}, {"Category": "Technology", "Sales": 470587.991}, {"Category": "Furniture", "Sales": 451508.6452}], "table_preview": [{"Category": "Office Supplies", "Sales": 643707.687}, {"Category": "Technology", "Sales": 470587.991}, {"Category": "Furniture", "Sales": 451508.6452}], "table_csv_url": "/api/visualizations/f227f308833842069b93934348bab086/table", "tableCsvUrl": "/api/visualizations/f227f308833842069b93934348bab086/table"}
{"id": "11a515729a944556a4cf13d9e0e1104e", "kind": "bar", "title": "Bar of Sales by Category", "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n(Feel free to use other obvious matches when present.)\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"plot total sale\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart.\r\nIf the user mentions 'profit', you must use a profit-like column (not sales).", "chat_id": "1756883857787", "x": "Category", "y": "Sales", "created_at": "2025-09-05T09:57:41.336700", "dataset_path": "E:\\SecureDocAI\\final_backend_ready\\final_backend\\uploaded_excels\\1756883857787\\SuperStore Sales DataSet.xlsx", "table": [{"Category": "Office Supplies", "Sales": 643707.687}, {"Category": "Technology", "Sales": 470587.991}, {"Category": "Furniture", "Sales": 451508.6452}], "table_preview": [{"Category": "Office Supplies", "Sales": 643707.687}, {"Category": "Technology", "Sales": 470587.991}, {"Category": "Furniture", "Sales": 451508.6452}], "table_csv_url": "/api/visualizations/11a515729a944556a4cf13d9e0e1104e/table", "tableCsvUrl": "/api/visualizations/11a515729a944556a4cf13d9e0e1104e/table"}
{"id": "870c029aef754983a2ffa18f7e855c69", "kind": "bar", "title": "Bar of Sales by Category", "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n(Feel free to use other obvious matches when present.)\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"total sale\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart.\r\nIf the user mentions 'profit', you must use a profit-like column (not sales).", "chat_id": "1756883857787", "x": "Category", "y": "Sales", "created_at": "2025-09-05T09:57:52.412024", "dataset_path": "E:\\SecureDocAI\\final_backend_ready\\final_backend\\uploaded_excels\\1756883857787\\SuperStore Sales DataSet.xlsx", "table": [{"Category": "Office Supplies", "Sales": 643707.687}, {"Category": "Technology", "Sales": 470587.991}, {"Category": "Furniture", "Sales": 451508.6452}], "table_preview": [{"Category": "Office Supplies", "Sales": 643707.687}, {"Category": "Technology", "Sales": 470587.991}, {"Category": "Furniture", "Sales": 451508.6452}], "table_csv_url": "/api/visualizations/870c029aef754983a2ffa18f7e855c69/table", "tableCsvUrl": "/api/visualizations/870c029aef754983a2ffa18f7e855c69/table"}
{"id": "4808b47114df4b319cbb1aea6545f125", "kind": "bar", "title": "Bar of Sales by Category", "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n(Feel free to use other obvious matches when present.)\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"give me total sales\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart.\r\nIf the user mentions 'profit', you must use a profit-like column (not sales).", "chat_id": "1756883857787", "x": "Category", "y": "Sales", "created_at": "2025-09-05T09:58:11.231893", "dataset_path": "E:\\SecureDocAI\\final_backend_ready\\final_backend\\uploaded_excels\\1756883857787\\SuperStore Sales DataSet.xlsx", "table": [{"Category": "Office Supplies", "Sales": 643707.687}, {"Category": "Technology", "Sales": 470587.991}, {"Category": "Furniture", "Sales": 451508.6452}], "table_preview": [{"Category": "Office Supplies", "Sales": 643707.687}, {"Category": "Technology", "Sales": 470587.991}, {"Category": "Furniture", "Sales": 451508.6452}], "table_csv_url": "/api/visualizations/4808b47114df4b319cbb1aea6545f125/table", "tableCsvUrl": "/api/visualizations/4808b47114df4b319cbb1aea6545f125/table"}
{"id": "4b7492d1eb2e4d70a0d016069151647e", "kind": "bar", "title": "Bar of Sales by Category", "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"give me total profit\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart.\r\nIf the user mentions 'profit', you must use a profit-like column (not sales).", "chat_id": "1756883857787", "x": "Category", "y": "Sales", "created_at": "2025-09-05T10:09:27.731065", "dataset_path": "E:\\SecureDocAI\\final_backend_ready\\final_backend\\uploaded_excels\\1756883857787\\SuperStore Sales DataSet.xlsx", "table": [{"Category": "Office Supplies", "Sales": 643707.687}, {"Category": "Technology", "Sales": 470587.991}, {"Category": "Furniture", "Sales": 451508.6452}], "table_preview": [{"Category": "Office Supplies", "Sales": 643707.687}, {"Category": "Technology", "Sales": 470587.991}, {"Category": "Furniture", "Sales": 451508.6452}], "table_csv_url": "/api/visualizations/4b7492d1eb2e4d70a0d016069151647e/table", "tableCsvUrl": "/api/visualizations/4b7492d1eb2e4d70a0d016069151647e/table"}
{"id": "8e0fb4998b664902be3958af67af3e4d", "kind": "bar", "title": "Bar of Total_Amount by Payment_Method", "question": "\r\nDATA IS READ-ONLY.\r\n- Never call DataFrame.insert, never assign back to df to create/overwrite columns.\r\n- Reuse existing columns; if needed, create locals (tmp variables) only.\r\n- Do not write to disk.\r\n- Respect user's requested chart type, x/y fields, filters, and aggregation.\r\n- If multiple sheets exist, pick the one whose columns best match the request (e.g., has Sales/Profit/Date for sales time-series).\r\n\r\n\r\nMap common columns case-insensitively (examples/synonyms):\r\n- date/time: order_date, date, orderdate, txn_date, ship_date, year, month, quarter\r\n- category: category, cat, product_category\r\n- subcategory: sub-category, subcategory, sub_cat, product_subcategory\r\n- product: product_name, item, sku, product\r\n- region: region, state, province, city, market\r\n- segment: segment, customer_segment\r\n- customer: customer_name, customer, client\r\n- sales: sales, sale_amount, revenue, net_sales, sales_amount, amount\r\n- profit: profit, net_profit, margin, gross_profit, profit_amount\r\n- quantity: quantity, qty, units_sold, order_quantity\r\n- discount: discount, disc\r\n- ship_mode: ship_mode, shipping_mode\r\n- salary/comp: salary, salary_usd, annual_salary, ctc, compensation, pay, income, wage, \"salary($)\", salary_in_usd\r\n- experience: experience, years_experience, yoe, yrs_exp, exp\r\n\r\nCreate EXACTLY the chart the user asked for:\r\n\"give me bar plot for total amount and payment method\"\r\n- Choose appropriate axes/encodings; label axes and add a clear title.\r\n- Apply grouping/aggregation if the question implies it (sum of sales by category, etc.).\r\n- If dates exist, sort chronologically and format nicely.\r\n- Avoid adding any extra commentary in the image; just render the chart.\r\nIf the user mentions 'profit', you must use a profit-like column (not sales).", "chat_id": "1757072227063", "x": "Payment_Method", "y": "Total_Amount", "created_at": "2025-09-05T11:56:52.632768", "dataset_path": "E:\\SecureDocAI\\final_backend_ready\\final_backend\\uploaded_excels\\1757072227063\\ecommerce_sales_large.csv", "table": [{"Payment_Method": "PayPal", "Total_Amount": 3901597}, {"Payment_Method": "Debit Card", "Total_Amount": 3832167}, {"Payment_Method": "COD", "Total_Amount": 3765068}, {"Payment_Method": "Credit Card", "Total_Amount": 3644904}], "table_preview": [{"Payment_Method": "PayPal", "Total_Amount": 3901597}, {"Payment_Method": "Debit Card", "Total_Amount": 3832167}, {"Payment_Method": "COD", "Total_Amount": 3765068}, {"Payment_Method": "Credit Card", "Total_Amount": 3644904}], "table_csv_url": "/api/visualizations/8e0fb4998b664902be3958af67af3e4d/table", "tableCsvUrl": "/api/visualizations/8e0fb4998b664902be3958af67af3e4d/table"}
